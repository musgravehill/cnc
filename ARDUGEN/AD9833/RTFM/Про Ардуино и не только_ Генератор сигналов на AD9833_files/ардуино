// API callback
related_results_labels_thumbs({"version":"1.0","encoding":"UTF-8","feed":{"xmlns":"http://www.w3.org/2005/Atom","xmlns$openSearch":"http://a9.com/-/spec/opensearchrss/1.0/","xmlns$blogger":"http://schemas.google.com/blogger/2008","xmlns$georss":"http://www.georss.org/georss","xmlns$gd":"http://schemas.google.com/g/2005","xmlns$thr":"http://purl.org/syndication/thread/1.0","id":{"$t":"tag:blogger.com,1999:blog-794788004739538112"},"updated":{"$t":"2019-04-15T11:47:52.329+03:00"},"category":[{"term":"ардуино"},{"term":"подключение"},{"term":"микросхема"},{"term":"программатор"},{"term":"энергопотребление"},{"term":"проект"},{"term":"энкодер вращения"},{"term":"lcd"},{"term":"spi"},{"term":"arduino pro mini"},{"term":"atmega328p"},{"term":"tiny"},{"term":"дребезг контактов"},{"term":"загрузчик"},{"term":"прерывания"},{"term":"digispark"},{"term":"midi"},{"term":"пьезоизлучатель"},{"term":"Светодиодная матрица"},{"term":"блютуз"},{"term":"датчик"},{"term":"фоторезистор"}],"title":{"type":"text","$t":"Про Ардуино и не только"},"subtitle":{"type":"html","$t":""},"link":[{"rel":"http://schemas.google.com/g/2005#feed","type":"application/atom+xml","href":"https:\/\/tsibrov.blogspot.com\/feeds\/posts\/default"},{"rel":"self","type":"application/atom+xml","href":"https:\/\/www.blogger.com\/feeds\/794788004739538112\/posts\/default\/-\/%D0%B0%D1%80%D0%B4%D1%83%D0%B8%D0%BD%D0%BE?alt=json-in-script\u0026max-results=6"},{"rel":"alternate","type":"text/html","href":"https:\/\/tsibrov.blogspot.com\/search\/label\/%D0%B0%D1%80%D0%B4%D1%83%D0%B8%D0%BD%D0%BE"},{"rel":"hub","href":"http://pubsubhubbub.appspot.com/"},{"rel":"next","type":"application/atom+xml","href":"https:\/\/www.blogger.com\/feeds\/794788004739538112\/posts\/default\/-\/%D0%B0%D1%80%D0%B4%D1%83%D0%B8%D0%BD%D0%BE\/-\/%D0%B0%D1%80%D0%B4%D1%83%D0%B8%D0%BD%D0%BE?alt=json-in-script\u0026start-index=7\u0026max-results=6"}],"author":[{"name":{"$t":"Владимир"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/07943437233560370294"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"16","height":"16","src":"https:\/\/img1.blogblog.com\/img\/b16-rounded.gif"}}],"generator":{"version":"7.00","uri":"http://www.blogger.com","$t":"Blogger"},"openSearch$totalResults":{"$t":"24"},"openSearch$startIndex":{"$t":"1"},"openSearch$itemsPerPage":{"$t":"6"},"entry":[{"id":{"$t":"tag:blogger.com,1999:blog-794788004739538112.post-5521136194863538850"},"published":{"$t":"2018-12-30T13:19:00.000+03:00"},"updated":{"$t":"2019-03-04T21:49:16.184+03:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"atmega328p"},{"scheme":"http://www.blogger.com/atom/ns#","term":"ардуино"},{"scheme":"http://www.blogger.com/atom/ns#","term":"загрузчик"},{"scheme":"http://www.blogger.com/atom/ns#","term":"программатор"},{"scheme":"http://www.blogger.com/atom/ns#","term":"энергопотребление"}],"title":{"type":"text","$t":"Тактирование Ардуино от внутреннего RC-генератора"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-ts3f16kUWjg\/XCiY7hx1CrI\/AAAAAAAAApQ\/ZdEFawMMgpst9iszktE8Zn-afAGJqvh6gCK4BGAYYCw\/s1600\/arduino-internal-rc.jpg\" imageanchor=\"1\"\u003E\u003Cimg alt=\"Arduino ATmega328P тактирование от внутреннего RC-генератора\" border=\"0\" height=\"320\" src=\"https:\/\/2.bp.blogspot.com\/-ts3f16kUWjg\/XCiY7hx1CrI\/AAAAAAAAApQ\/ZdEFawMMgpst9iszktE8Zn-afAGJqvh6gCK4BGAYYCw\/s320\/arduino-internal-rc.jpg\" title=\"\" width=\"320\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003EПри написании публикации про ATtiny85 я обратил внимание на то, как реализовано изменение частоты микроконтроллера: достаточно выбрать нужное значение тактовой частоты в меню IDE Ардуино и затем выполнить команду \"Записать загрузчик\". А почему бы не сделать так же для Ардуино? Чтобы можно было простыми действиями настроить ее на тактирование либо от внешнего резонатора на 16МГц, либо от внутреннего RC-генератора на 8МГц. Кстати при тактировании от внутреннего генератора микроконтроллер можно извлечь из Ардуино, тем самым значительно снизить энергопотребление. В общем, тема весьма интересная, подробности под катом.\u003Cbr \/\u003E\u003Ca name='more'\u003E\u003C\/a\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003EСодержание\u003C\/h2\u003E\u003Cdiv\u003E\u003Ca href=\"https:\/\/tsibrov.blogspot.com\/2018\/12\/arduino-internal-rc.html#%D0%A7%D1%82%D0%BE%20%D0%BD%D1%83%D0%B6%D0%BD%D0%BE%20%D0%B7%D0%BD%D0%B0%D1%82%D1%8C%20%D0%BE%20%D1%82%D0%B0%D0%BA%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B8%20AVR%20%D0%BC%D0%B8%D0%BA%D1%80%D0%BE%D0%BA%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D0%BB%D0%B5%D1%80%D0%BE%D0%B2\"\u003EЧто нужно знать о тактировании AVR микроконтроллеров\u003C\/a\u003E\u003Cbr \/\u003E\u003Ca href=\"https:\/\/tsibrov.blogspot.com\/2018\/12\/arduino-internal-rc.html#%D0%A0%D0%B5%D0%B4%D0%B0%D0%BA%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D1%84%D0%B0%D0%B9%D0%BB%D0%B0%20boards.txt\"\u003EРедактирование файла boards.txt\u003C\/a\u003E\u003Cbr \/\u003E\u003Ca href=\"https:\/\/tsibrov.blogspot.com\/2018\/12\/arduino-internal-rc.html#%D0%A7%D1%82%D0%BE%20%D1%82%D0%B0%D0%BA%D0%BE%D0%B5%20Optiboot\"\u003EЧто такое Optiboot\u003C\/a\u003E\u003Cbr \/\u003E\u003Ca href=\"https:\/\/tsibrov.blogspot.com\/2018\/12\/arduino-internal-rc.html#%D0%9A%D0%BE%D0%BC%D0%BF%D0%B8%D0%BB%D1%8F%D1%86%D0%B8%D1%8F%20Optiboot%20%D0%B4%D0%BB%D1%8F%20%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B%20%D0%BD%D0%B0%20%D1%87%D0%B0%D1%81%D1%82%D0%BE%D1%82%D0%B0%D1%85%208%D0%9C%D0%93%D1%86%20%D0%B8%201%D0%9C%D0%93%D1%86\"\u003EКомпиляция Optiboot для работы на частотах 8МГц и 1МГц\u003C\/a\u003E\u003Cbr \/\u003E\u003Ca href=\"https:\/\/tsibrov.blogspot.com\/2018\/12\/arduino-internal-rc.html#%D0%98%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D1%87%D0%B0%D1%81%D1%82%D0%BE%D1%82%D1%8B%20%D0%B8%20%D0%B8%D1%81%D1%82%D0%BE%D1%87%D0%BD%D0%B8%D0%BA%D0%B0%20%D1%82%D0%B0%D0%BA%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F%20%D0%90%D1%80%D0%B4%D1%83%D0%B8%D0%BD%D0%BE\"\u003EИзменение частоты и источника тактирования Ардуино\u003C\/a\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003E\u003Ca href=\"http:\/\/www.blogger.com\/blogger.g?blogID=794788004739538112\" name=\"Что нужно знать о тактировании AVR микроконтроллеров\"\u003E\u003C\/a\u003EЧто нужно знать о тактировании AVR микроконтроллеров\u003C\/h2\u003EAVR микроконтроллеры способны работать с различными источниками тактового сигнала. Это может быть внешний резонатор, RC-цепочка (внутренняя или внешняя), а так же внешний сигнал синхронизации. Источник тактирования выбирается исходя из требований к устройству. Так для построения точных микроконтроллерных систем следует использовать внешние кварцевые или керамические резонаторы, так как они обладают высокой стабильностью и не чувствительны к изменениям температуры. В этом плане им уступают генераторы на основе времязадающей RC-цепочки: они менее стабильны и чувствительны к изменениям температуры и напряжения. С другой стороны внутренний RC-генератор присутствует практически во всех AVR микроконтроллерах и его использование будет наиболее простым и экономичным решением в системах, не предъявляющих высоких требований к стабильности тактового сигнала.\u003Cbr \/\u003E\u003Cbr \/\u003EНастройка микроконтроллера на работу с тем или иным источником тактового сигнала осуществляется установкой \u003Ca href=\"https:\/\/tsibrov.blogspot.com\/2018\/08\/fuse-bits.html\" target=\"_blank\"\u003Eконфигурационных битов (фьюзов)\u003C\/a\u003E при помощи программатора. Применительно к нашей ситуации установка фьюзов происходит при выполнении команды \"Записать загрузчик\" из меню IDE Ардуино, значения фьюзов берутся из файла boards.txt. Он же отвечает за добавление новых пунктов в меню \u003Ci\u003EИнструменты\u003C\/i\u003E. Поэтому доработка IDE Ардуино для добавления в нее меню выбора частоты начинается с редактирования файла boards.txt\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003E\u003Ca href=\"http:\/\/www.blogger.com\/blogger.g?blogID=794788004739538112\" name=\"Редактирование файла boards.txt\"\u003E\u003C\/a\u003EРедактирование файла boards.txt\u003C\/h2\u003EПерейдите в каталог \u003Ci\u003EArduino_dir\\hardware\\arduino\\avr\\\u003C\/i\u003E, где Arduino_dir - это каталог, в который установлена среда разработки Ардуино. У меня этот путь выглядит так:\u0026nbsp;\u003Ci\u003Ed:\\Arduino\\arduino-1.6.12\\hardware\\arduino\\avr\\.\u003C\/i\u003E\u0026nbsp;Перед внесением изменений в файл boards.txt я рекомендую сделать его резервную копию. Теперь открываем файл boards.txt в текстовом редакторе (подойдет notepad++ или другой, поддерживающий кодировку UTF-8, чтобы не было проблем с отображением русских букв в IDE Ардуино)\u0026nbsp; и добавляем в него строку\u0026nbsp;\u003Cb\u003Emenu.clock=Тактирование\u003C\/b\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-8l9s9e_xlBY\/XB3p4ompUyI\/AAAAAAAAAnM\/ABnmM-rORrcssLk2ONJjxatV77gbrYYsgCK4BGAYYCw\/s1600\/arduino_menu_clock.png\" imageanchor=\"1\"\u003E\u003Cimg alt=\"Редактирование boards.txt Ардуино\" border=\"0\" src=\"https:\/\/3.bp.blogspot.com\/-8l9s9e_xlBY\/XB3p4ompUyI\/AAAAAAAAAnM\/ABnmM-rORrcssLk2ONJjxatV77gbrYYsgCK4BGAYYCw\/s1600\/arduino_menu_clock.png\" title=\"\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003EЗатем находим секцию для Ардуино Уно (я опишу порядок действий применительно к Ардуино Уно, но таким же образом можно скорректировать секции других плат с поправкой на микроконтроллер):\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-GdElnfSJQJk\/XB3sRd4Cu9I\/AAAAAAAAAnY\/6yZ6GZK1oq0qrrnZwvb5myea_M70Zw9ogCK4BGAYYCw\/s1600\/uno_section_boards_txt.png\" imageanchor=\"1\"\u003E\u003Cimg alt=\"Редактирование boards.txt Ардуино\" border=\"0\" src=\"https:\/\/3.bp.blogspot.com\/-GdElnfSJQJk\/XB3sRd4Cu9I\/AAAAAAAAAnY\/6yZ6GZK1oq0qrrnZwvb5myea_M70Zw9ogCK4BGAYYCw\/s1600\/uno_section_boards_txt.png\" title=\"\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003EЗдесь нужно добавить наше подменю для выбора источника тактирования и частоты. Для этого сперва удалим строки, определяющие:\u003Cbr \/\u003E\u003Col style=\"text-align: left;\"\u003E\u003Cli\u003Eскорость загрузки - \u003Cb\u003Euno.upload.speed\u003C\/b\u003E;\u003C\/li\u003E\u003Cli\u003Eзначения фьюзов - \u003Cb\u003Euno.bootloader.low_fuses\u003C\/b\u003E, \u003Cb\u003E.high_fuses\u003C\/b\u003E, \u003Cb\u003E.extended_fuses\u003C\/b\u003E;\u003C\/li\u003E\u003Cli\u003Eимя файла загрузчика - \u003Cb\u003Euno.bootloader.file\u003C\/b\u003E;\u003C\/li\u003E\u003Cli\u003Eчастоту микроконтроллера - \u003Cb\u003Euno.build.f_cpu\u003C\/b\u003E.\u003C\/li\u003E\u003C\/ol\u003EЭти параметры мы перенесем в подменю, в основной же секции останутся только общие параметры. Ниже приведен фрагмент, добавляющий подменю выбора источника тактирования,\u0026nbsp;\u0026nbsp;вставьте его в свой файл.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cb\u003Euno.menu.clock.external16=Внешний резонатор 16МГц\u003C\/b\u003E\u003Cbr \/\u003E\u003Cb\u003Euno.menu.clock.external16.upload.speed=115200\u003C\/b\u003E\u003Cbr \/\u003E\u003Cb\u003Euno.menu.clock.external16.bootloader.low_fuses=0xFF\u003C\/b\u003E\u003Cbr \/\u003E\u003Cb\u003Euno.menu.clock.external16.bootloader.high_fuses=0xDE\u003C\/b\u003E\u003Cbr \/\u003E\u003Cb\u003Euno.menu.clock.external16.bootloader.extended_fuses=0xFF\u003C\/b\u003E\u003Cbr \/\u003E\u003Cb\u003Euno.menu.clock.external16.bootloader.file=optiboot\/optiboot_atmega328.hex\u003C\/b\u003E\u003Cbr \/\u003E\u003Cb\u003Euno.menu.clock.external16.build.f_cpu=16000000L\u003C\/b\u003E\u003Cbr \/\u003E\u003Cb\u003E\u003Cbr \/\u003E\u003C\/b\u003E\u003Cb\u003Euno.menu.clock.internal8=Внутренний RC-генератор 8МГц\u003C\/b\u003E\u003Cbr \/\u003E\u003Cb\u003Euno.menu.clock.internal8.upload.speed=57600\u003C\/b\u003E\u003Cbr \/\u003E\u003Cb\u003Euno.menu.clock.internal8.bootloader.low_fuses=0xE2\u003C\/b\u003E\u003Cbr \/\u003E\u003Cb\u003Euno.menu.clock.internal8.bootloader.high_fuses=0xDE\u003C\/b\u003E\u003Cbr \/\u003E\u003Cb\u003Euno.menu.clock.internal8.bootloader.extended_fuses=0xFF\u003C\/b\u003E\u003Cbr \/\u003E\u003Cb\u003Euno.menu.clock.internal8.bootloader.file=optiboot\/optiboot_atmega328_8.hex\u003C\/b\u003E\u003Cbr \/\u003E\u003Cb\u003Euno.menu.clock.internal8.build.f_cpu=8000000L\u003C\/b\u003E\u003Cbr \/\u003E\u003Cb\u003E\u003Cbr \/\u003E\u003C\/b\u003E\u003Cb\u003Euno.menu.clock.internal1=Внутренний RC-генератор 1МГц\u003C\/b\u003E\u003Cbr \/\u003E\u003Cb\u003Euno.menu.clock.internal1.upload.speed=4800\u003C\/b\u003E\u003Cbr \/\u003E\u003Cb\u003Euno.menu.clock.internal1.bootloader.low_fuses=0x62\u003C\/b\u003E\u003Cbr \/\u003E\u003Cb\u003Euno.menu.clock.internal1.bootloader.high_fuses=0xDE\u003C\/b\u003E\u003Cbr \/\u003E\u003Cb\u003Euno.menu.clock.internal1.bootloader.extended_fuses=0xFF\u003C\/b\u003E\u003Cbr \/\u003E\u003Cb\u003Euno.menu.clock.internal1.bootloader.file=optiboot\/optiboot_atmega328_1.hex\u003C\/b\u003E\u003Cbr \/\u003E\u003Cb\u003Euno.menu.clock.internal1.build.f_cpu=1000000L\u003C\/b\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EДля наглядности я приведу скриншот моего файла boards.txt, каким он был и каким стал после выполнения описанных изменений:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-NKAxQtRLY7Y\/XCO6Df2qiAI\/AAAAAAAAAog\/SgrckbD55_8cY6zwsgBrnqd0XxVxUNdqQCK4BGAYYCw\/s1600\/adding_clock_submenu.png\" imageanchor=\"1\"\u003E\u003Cimg alt=\"Редактирование boards.txt Ардуино\" border=\"0\" height=\"606\" src=\"https:\/\/1.bp.blogspot.com\/-NKAxQtRLY7Y\/XCO6Df2qiAI\/AAAAAAAAAog\/SgrckbD55_8cY6zwsgBrnqd0XxVxUNdqQCK4BGAYYCw\/s640\/adding_clock_submenu.png\" title=\"\" width=\"750\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cbr \/\u003EТаким образом мы описали меню из трех пунктов, для каждого из них указали скорость загрузки скетчей, значения фьюзов, имя файла загрузчика (об этом чуть позже) и частоту микроконтроллера. При помощи\u0026nbsp;\u003Ca href=\"http:\/\/www.engbedded.com\/fusecalc\/\" target=\"_blank\"\u003Eонлайн калькулятора\u003C\/a\u003E\u0026nbsp;вы можете расшифровать приведенные значения фьюзов и увидеть, как происходит выбор источника тактирования. И что для получения тактовой частоты 1МГц при работе от внутреннего RC-генератора используется деление частоты на 8 (фьюз CKDIV8).\u003Cbr \/\u003E\u003Cbr \/\u003EСохраните файл в кодировке UTF-8 без BOM и запустите IDE. Если все сделано правильно, то при выборе платы Arduino Uno вам станет доступно меню \u003Ci\u003EИнструменты-\u0026gt;Тактирование\u003C\/i\u003E. Но этих изменений пока еще мало. Если сейчас выбрать в меню, например,\u0026nbsp;\u003Ci\u003EВнутренний RC-генератор 8МГц\u003C\/i\u003E\u0026nbsp;и выполнить запись загрузчика, то новые значения фьюзов, конечно, запишутся в микроконтроллер и он начнет работать с внутренним RC-генератором. Но мы потеряем возможность загружать в Ардуино новые скетчи, потому что записанный в нее загрузчик рассчитан на частоту 16МГц. Выход - скомпилировать загрузчик для работы на частотах 8МГц и 1МГц. Если у вас нет желания заморачиваться с компиляцией загрузчика, то можете скачать уже скомпилированные файлы \u003Ca href=\"http:\/\/clc.am\/optiboot_atmega328_1MHz_8MHz\" target=\"_blank\"\u003Eотсюда\u003C\/a\u003E, поместить их в каталог \u003Ci\u003EArduino_dir\\hardware\\arduino\\avr\\bootloaders\\optiboot\\\u003C\/i\u003E и перейти к пункту\u0026nbsp;\u003Ca href=\"https:\/\/tsibrov.blogspot.com\/2018\/12\/arduino-internal-rc.html#%D0%98%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D1%87%D0%B0%D1%81%D1%82%D0%BE%D1%82%D1%8B%20%D0%B8%20%D1%81%D0%BF%D0%BE%D1%81%D0%BE%D0%B1%D0%B0%20%D1%82%D0%B0%D0%BA%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F%20%D0%90%D1%80%D0%B4%D1%83%D0%B8%D0%BD%D0%BE\"\u003EИзменение частоты и источника тактирования Ардуино\u003C\/a\u003E. А кому интересно могут скомпилировать их самостоятельно. О том как это сделать описано далее.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003E\u003Ca href=\"http:\/\/www.blogger.com\/blogger.g?blogID=794788004739538112\" name=\"Что такое Optiboot\"\u003E\u003C\/a\u003EЧто такое Optiboot\u003C\/h2\u003E\u003Cbr \/\u003E\u003Ca href=\"https:\/\/github.com\/Optiboot\/optiboot\" target=\"_blank\"\u003EOptiboot\u003C\/a\u003E - это загрузчик для AVR микроконтроллеров, созданный\u0026nbsp;Питером Найтом (Peter Knight). В его основу легли труды нескольких разработчиков и групп (Jason P. Kyle, Arduino group, Spiff , AVR-Libc group, Ladyada), впоследствии он значительно развился. Загрузчик получился настолько удачным, что компания-разработчик Ардуино стала использовать его в своей плате Ардуино Уно. С недавнего времени Optiboot\u0026nbsp;является официальным загрузчиком и для других плат на базе ATmega328p (Нано, Мини). По сравнению с использовавшимся в них старым загрузчиком Optiboot обладает рядом преимуществ:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cul style=\"text-align: left;\"\u003E\u003Cli\u003Eзанимает всего 512 байт, освобождая 1,5кб для программ пользователя;\u003C\/li\u003E\u003Cli\u003Eзначительно быстрее выполняет\u0026nbsp;загрузку скетчей;\u003C\/li\u003E\u003Cli\u003Eподдерживает альтернативные серийные порты, скорости загрузки и частоты микроконтроллера.\u003C\/li\u003E\u003C\/ul\u003E\u003Cbr \/\u003EС 2011 года поддержкой Optiboot\u0026nbsp;занимается\u0026nbsp;\u0026nbsp;Билл Вестфилд (Bill Westfield). Это самостоятельный проект, не финансируемый какими-либо организациями.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003E\u003Ca href=\"http:\/\/www.blogger.com\/blogger.g?blogID=794788004739538112\" name=\"Компиляция Optiboot для работы на частотах 8МГц и 1МГц\"\u003E\u003C\/a\u003EКомпиляция Optiboot для работы на частотах 8МГц и 1МГц\u003C\/h2\u003E\u003Cdiv\u003EИсходные файлы Optiboot входят в состав IDE Ардуино и находятся в каталоге \u003Ci\u003EArduino_dir\\hardware\\arduino\\avr\\bootloaders\\optiboot\\\u003C\/i\u003E. Там же расположен батник omake.bat для сборки загрузчика. Вот только для его сборки в составе IDE Ардуино (начиная с версий 1.5.x) не хватает утилиты make.exe. Наиболее простое решение - это скопировать ее из старой версии. Для этого:\u003Cbr \/\u003E\u003Col style=\"text-align: left;\"\u003E\u003Cli\u003Eскачайте\u0026nbsp;\u003Ca href=\"https:\/\/www.arduino.cc\/download_handler.php?f=\/arduino-1.0.6-windows.zip\" target=\"_blank\"\u003EIDE версии 1.0.6\u003C\/a\u003E;\u003C\/li\u003E\u003Cli\u003Eраспакуйте архив и перейдите каталог \u003Ci\u003E\\arduino-1.0.6\\hardware\\\u003C\/i\u003E;\u003C\/li\u003E\u003Cli\u003Eскопируйте или переместите каталог \u003Ci\u003Etools\u003C\/i\u003E\u0026nbsp;в \u003Ci\u003EArduino_dir\\hardware\\arduino\\ \u003C\/i\u003Eвашей рабочей IDE;\u003C\/li\u003E\u003Cli\u003EIDE 1.0.6 больше не нужна, ее можно удалить.\u003C\/li\u003E\u003C\/ol\u003EПерейдите в каталог optiboot и откройте файл\u0026nbsp;Makefile в Блокноте. В нем нужно найти секцию для\u0026nbsp;atmega328:\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-Go-X5twTPK8\/XB6E0UhwrcI\/AAAAAAAAAnw\/xsK0EI7D2EcXDbvXeK0Mc0jHoEzoyIu4wCK4BGAYYCw\/s1600\/editing_makefile.png\" imageanchor=\"1\"\u003E\u003Cimg alt=\"Компиляция optiboot для Ардуино\" border=\"0\" src=\"https:\/\/2.bp.blogspot.com\/-Go-X5twTPK8\/XB6E0UhwrcI\/AAAAAAAAAnw\/xsK0EI7D2EcXDbvXeK0Mc0jHoEzoyIu4wCK4BGAYYCw\/s1600\/editing_makefile.png\" title=\"\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EМежду ней и началом следующей секции для Sanguino вставляем код:\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv\u003E\u003Cb\u003Eatmega328_8: TARGET = atmega328\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003Eatmega328_8: MCU_TARGET = atmega328p\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003Eatmega328_8: CFLAGS += '-DLED_START_FLASHES=3' '-DBAUD_RATE=57600'\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003Eatmega328_8: AVR_FREQ = 8000000L\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003Eatmega328_8: LDSECTIONS\u0026nbsp; = -Wl,--section-start=.text=0x7e00 -Wl,--section-start=.version=0x7ffe\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003Eatmega328_8: $(PROGRAM)_atmega328_8.hex\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003Eatmega328_8: $(PROGRAM)_atmega328_8.lst\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003E\u003Cbr \/\u003E\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003Eatmega328_1: TARGET = atmega328\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003Eatmega328_1: MCU_TARGET = atmega328p\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003Eatmega328_1: CFLAGS += '-DLED_START_FLASHES=3' '-DBAUD_RATE=4800'\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003Eatmega328_1: AVR_FREQ = 1000000L\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003Eatmega328_1: LDSECTIONS\u0026nbsp; = -Wl,--section-start=.text=0x7e00 -Wl,--section-start=.version=0x7ffe\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003Eatmega328_1: $(PROGRAM)_atmega328_1.hex\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003Eatmega328_1: $(PROGRAM)_atmega328_1.lst\u003C\/b\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EЭто копии секции atmega328. От исходной они отличаются частотой микроконтроллера и скоростью загрузки скетчей. Эти значения соответствуют указанным нами ранее в файле boards.txt. Думаю, можно указать и большую скорость загрузки, но я не экспериментировал с этим. Однозначно, при слишком высокой скорости ошибки будут неизбежны, поэтому с уменьшением частоты микроконтроллера я уменьшаю и скорость загрузки.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EТеперь нужно скомпилировать загрузчик для работы на пониженной частоте. Для этого, находясь в каталоге\u0026nbsp;\u003Ci\u003EArduino_dir\\hardware\\arduino\\avr\\bootloaders\\optiboot\\\u003C\/i\u003E, запустите командную строку, введите и выполните по очереди команды:\u003Cbr \/\u003E\u003Cb\u003Eomake.bat atmega328_8\u003C\/b\u003E\u003Cbr \/\u003E\u003Cb\u003Eomake.bat atmega328_1\u003C\/b\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-3mC96logj9E\/XCO7dMdM6qI\/AAAAAAAAAos\/ZCt4h2uoVp8ttJ9fIhTCTPUxUJfYUjs3gCK4BGAYYCw\/s1600\/compiling_optiboot.png\" imageanchor=\"1\"\u003E\u003Cimg alt=\"Компиляция optiboot для Ардуино\" border=\"0\" height=\"400\" src=\"https:\/\/2.bp.blogspot.com\/-3mC96logj9E\/XCO7dMdM6qI\/AAAAAAAAAos\/ZCt4h2uoVp8ttJ9fIhTCTPUxUJfYUjs3gCK4BGAYYCw\/s640\/compiling_optiboot.png\" title=\"\" width=\"750\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003EЗагрузчики для работы на частоте 8МГц и 1МГц готовы! \u003Cb\u003EТеперь нужно удалить папку tools, которую мы позаимствовали из IDE Ардуино 1.0.6. Если этого не сделать, то среда не запустится.\u003C\/b\u003E Связано это с тем, что содержимое\u0026nbsp;\u003Ci\u003EArduino_dir\\hardware\\arduino\\\u003C\/i\u003E\u0026nbsp;должно иметь определенную структуру и папке tools здесь не место.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003E\u003Ca href=\"http:\/\/www.blogger.com\/blogger.g?blogID=794788004739538112\" name=\"Изменение частоты и источника тактирования Ардуино\"\u003E\u003C\/a\u003EИзменение частоты и источника тактирования Ардуино\u003C\/h2\u003EДля изменения частоты и источника тактирования необходимо записать в Ардуино новый загрузчик. Для выполнения этой процедуры нужен программатор. Если у вас его нет, то можете использовать в качестве программатора другую плату Ардуино, в статье\u0026nbsp;\u003Ca href=\"https:\/\/tsibrov.blogspot.com\/2018\/07\/arduino-as-isp.html\" target=\"_blank\"\u003EArduino as ISP - программатор из Ардуино\u003C\/a\u003E\u0026nbsp;эта тема подробно расписана. Я для записи загрузчика воспользуюсь программатором\u0026nbsp;\u003Ca href=\"https:\/\/tsibrov.blogspot.com\/2018\/09\/usbasp.html\" target=\"_blank\"\u003EUSBasp\u003C\/a\u003E.\u003Cbr \/\u003E\u003Cbr \/\u003EИтак, запускаем среду разработки Ардуино, выбираем в списке плат\u0026nbsp;Arduino\/Genuino Uno, в меню\u0026nbsp;\u003Ci\u003EИнструменты-\u0026gt;\u003C\/i\u003E\u003Ci\u003EТактирование\u003C\/i\u003E выбираем значение\u0026nbsp;\u003Ci\u003EВнутренний RC-генератор 8МГц\u003C\/i\u003E. Подключаем программатор к компьютеру, выставляем соответствующее значение в меню \u003Ci\u003EИнструменты-\u0026gt;Программатор\u003C\/i\u003E. Записываем загрузчик. После этого отключаем программатор, подключаем Ардуино\u0026nbsp;напрямую к компьютеру и в меню\u0026nbsp;\u003Ci\u003EИнструменты-\u0026gt;Программатор\u003C\/i\u003E\u0026nbsp;выставляем стандартное значение - \u003Ci\u003EAVRISP mkII\u003C\/i\u003E. Теперь можете проверить работу платы, загрузив в нее скетч Blink из стандартных примеров. Когда решите снова изменить частоту, нужно будет повторно выполнить запись загрузчика, выбрав соответствующее значение в меню \u003Ci\u003EТактирование\u003C\/i\u003E.\u003Cbr \/\u003E\u003Cbr \/\u003EЕсли при записи загрузчика на 1МГц через USBasp у вас возникнет следующая ошибка:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-TP-bJI1U4EU\/XCiYcIPwnqI\/AAAAAAAAApE\/F4B8nUb1158kVNdxGlM5-rK9rrR_JK7jwCK4BGAYYCw\/s1600\/usbasp_lowfreq_error.png\" imageanchor=\"1\"\u003E\u003Cimg alt=\"USBasp ошибка при записи загрузчика\" border=\"0\" src=\"https:\/\/3.bp.blogspot.com\/-TP-bJI1U4EU\/XCiYcIPwnqI\/AAAAAAAAApE\/F4B8nUb1158kVNdxGlM5-rK9rrR_JK7jwCK4BGAYYCw\/s1600\/usbasp_lowfreq_error.png\" title=\"\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E- не пугайтесь, просто нужно установить перемычку JP3 на программаторе. При использовании Ардуино в качестве программатора такая ошибка не возникает.\u003Cbr \/\u003E\u003Cbr \/\u003EТеперь было бы интересно вынуть ATmega328P из Ардуино и измерить его энергопотребление при работе на 8МГц \/ 1МГц, а также в режиме PowerDown. Но это я оставлю для следующей публикации.\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"https:\/\/tsibrov.blogspot.com\/feeds\/5521136194863538850\/comments\/default","title":"Комментарии к сообщению"},{"rel":"replies","type":"text/html","href":"https:\/\/tsibrov.blogspot.com\/2018\/12\/arduino-internal-rc.html#comment-form","title":"Комментарии: 0"},{"rel":"edit","type":"application/atom+xml","href":"https:\/\/www.blogger.com\/feeds\/794788004739538112\/posts\/default\/5521136194863538850"},{"rel":"self","type":"application/atom+xml","href":"https:\/\/www.blogger.com\/feeds\/794788004739538112\/posts\/default\/5521136194863538850"},{"rel":"alternate","type":"text/html","href":"https:\/\/tsibrov.blogspot.com\/2018\/12\/arduino-internal-rc.html","title":"Тактирование Ардуино от внутреннего RC-генератора"}],"author":[{"name":{"$t":"Владимир"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/07943437233560370294"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"16","height":"16","src":"https:\/\/img1.blogblog.com\/img\/b16-rounded.gif"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"https:\/\/2.bp.blogspot.com\/-ts3f16kUWjg\/XCiY7hx1CrI\/AAAAAAAAApQ\/ZdEFawMMgpst9iszktE8Zn-afAGJqvh6gCK4BGAYYCw\/s72-c\/arduino-internal-rc.jpg","height":"72","width":"72"},"thr$total":{"$t":"0"}},{"id":{"$t":"tag:blogger.com,1999:blog-794788004739538112.post-5756005322299078524"},"published":{"$t":"2018-11-01T10:24:00.000+03:00"},"updated":{"$t":"2019-01-07T14:45:16.482+03:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"tiny"},{"scheme":"http://www.blogger.com/atom/ns#","term":"ардуино"},{"scheme":"http://www.blogger.com/atom/ns#","term":"микросхема"},{"scheme":"http://www.blogger.com/atom/ns#","term":"программатор"},{"scheme":"http://www.blogger.com/atom/ns#","term":"энергопотребление"}],"title":{"type":"text","$t":"Знакомство с ATtiny85"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/4.bp.blogspot.com\/-jNOnLfF4rGU\/W9QTE16axSI\/AAAAAAAAAjo\/WKVVAqGrFU0PbB0UbIWZkYJPp1JphzV1QCK4BGAYYCw\/s1600\/attiny85.jpg\" imageanchor=\"1\"\u003E\u003Cimg alt=\"ATtiny85\" border=\"0\" height=\"291\" src=\"https:\/\/4.bp.blogspot.com\/-jNOnLfF4rGU\/W9QTE16axSI\/AAAAAAAAAjo\/WKVVAqGrFU0PbB0UbIWZkYJPp1JphzV1QCK4BGAYYCw\/s320\/attiny85.jpg\" title=\"\" width=\"320\" \/\u003E\u003C\/a\u003E\u003C\/div\u003EATtiny85 - это 8-битный AVR микроконтроллер фирмы Atmel, представитель семейства tiny. Микроконтроллеры данного семейства, как следует из его названия, являются младшими в линейке AVR: у них меньшее число линий ввода-вывода, меньший объем памяти и ограниченный набор периферийных устройств по сравнению с микроконтроллерами mega\/XMEGA. Но это окупается их меньшей стоимостью и малыми размерами. Кроме того tiny микроконтроллеры имеют ту же производительность, что и старшие микроконтроллеры семейства mega. Это делает их отличным выбором для создания устройств, не требующих широкого набора периферии, где размер и цена микроконтроллера имеют значение: tinyAVR находят применение в портативных навигаторах, плеерах, сотовых телефонах, спортивных гаджетах, бытовой технике, электронных игрушках, пультах дистанционного управления, интеллектуальных датчиках и во многих других устройствах. Но вернемся к ATtiny85 и ознакомимся с характеристиками данного микроконтроллера.\u003Cbr \/\u003E\u003Ca name='more'\u003E\u003C\/a\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003EХарактеристики ATtiny85\u003C\/h2\u003E\u003Cul style=\"text-align: left;\"\u003E\u003Cli\u003EПамять программ (FLASH) - 8КБ\u003C\/li\u003E\u003Cli\u003EОЗУ (SRAM) - 512 байт\u003C\/li\u003E\u003Cli\u003EЭнергонезависимая память (EEPROM) - 512 байт\u003C\/li\u003E\u003Cli\u003EТактовая частота - до 20МГц\u003C\/li\u003E\u003Cli\u003EUSI (Universal Serial Interface) - универсальный последовательный интерфейс. Может использоваться в двухпроводном (I2C\/TWI) и трехпроводном (SPI) режиме\u003C\/li\u003E\u003Cli\u003E4-х канальный 10-разрядный АЦП\u003C\/li\u003E\u003Cli\u003EАналоговый компаратор\u003C\/li\u003E\u003Cli\u003E2 8-битных таймера-счетчика\u003C\/li\u003E\u003Cli\u003EСторожевой таймер\u003C\/li\u003E\u003Cli\u003E8 выводов, 6 из которых могут использоваться как линии ввода-вывода\u003C\/li\u003E\u003Cli\u003EНапряжение питания 2.7 .. 5.5В\u003C\/li\u003E\u003C\/ul\u003EДанных параметров вполне достаточно для решения ряда задач. И вы можете найти множество интересных проектов на базе ATtiny85, подтверждающих это. Также микроконтроллер поддерживает три режима энергосбережения для создания энергоэффективных устройств. Одним словом данный микроконтроллер заслуживает внимания, поэтому сегодня я расскажу о том, как программировать ATtiny85 в привычной нам среде разработки Ардуино.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003EПрограммирование ATtiny85 в IDE Arduino\u003C\/h2\u003EИтак, программировать ATtiny85 будем в IDE Arduino, причем ее версия должна быть не ниже 1.6.4, а для прошивки нам потребуется программатор. В качестве программатора я буду использовать Ардуино Уно. Эта тема подробно описана в статье \u003Ca href=\"https:\/\/tsibrov.blogspot.com\/2018\/07\/arduino-as-isp.html\" target=\"_blank\"\u003EArduino as ISP\u003C\/a\u003E, поэтому сегодня не станем заострять на ней внимание. Можно использовать и другие программаторы, например, рассмотренный недавно USBasp. В этом случае пропустите следующий пункт и переходите к настройке IDE.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch3 style=\"text-align: left;\"\u003EПодготовка программатора Arduino as ISP\u003C\/h3\u003EЗапускаем IDE Arduino, открываем скетч ArduinoISP (меню \u003Ci\u003EФайл \u0026gt; Примеры \u0026gt; ArduinoISP\u003C\/i\u003E), подключаем Ардуино к компьютеру и загружаем в нее скетч. На этом плату Ардуино пока можно отложить, займемся настройкой IDE.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch3 style=\"text-align: left;\"\u003EДобавление ATtiny85 в список плат IDE Arduino\u003C\/h3\u003EВ среде разработки Ардуино отсутствуют компоненты, необходимые для работы с микроконтроллерами tiny, поэтому сейчас нужно добавить их в IDE. Для этого скопируйте в буфер обмена следующую строку:\u003Cbr \/\u003E\u003Cb\u003Ehttps:\/\/raw.githubusercontent.com\/damellis\/attiny\/ide-1.6.x-boards-manager\/package_damellis_attiny_index.json\u003C\/b\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EТеперь в IDE открываем меню \u003Ci\u003EФайл \u0026gt; Настройки\u003C\/i\u003E и в появившемся окне нажимаем кнопку рядом с полем ввода дополнительных ссылок для Менеджера плат. В открывшемся окне вставляем скопированную ранее ссылку новой строкой. Нажимаем OK для сохранения изменений и выхода из настроек:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-Tdmf52yN73c\/W9H0rjVpnDI\/AAAAAAAAAjA\/WcmCPfvlEqUmlphbSLrttwuGOt6z0YO1QCK4BGAYYCw\/s1600\/01.gif\" imageanchor=\"1\"\u003E\u003Cimg alt=\"Добавление поддержки ATtiny85 в IDE Arduino\" border=\"0\" height=\"497\" src=\"https:\/\/3.bp.blogspot.com\/-Tdmf52yN73c\/W9H0rjVpnDI\/AAAAAAAAAjA\/WcmCPfvlEqUmlphbSLrttwuGOt6z0YO1QCK4BGAYYCw\/s640\/01.gif\" title=\"\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003EКстати, в окне ввода дополнительных ссылок можно перейти по ссылке под полем ввода, откроется страница\u0026nbsp;\u003Ca href=\"https:\/\/github.com\/arduino\/Arduino\/wiki\/Unofficial-list-of-3rd-party-boards-support-urls\" target=\"_blank\"\u003Ehttps:\/\/github.com\/arduino\/Arduino\/wiki\/Unofficial-list-of-3rd-party-boards-support-urls\u003C\/a\u003E. На ней вы найдете большое количество ресурсов для поддержки различных плат и микроконтроллеров, в том числе и используемый нами пакет от\u0026nbsp;\u003Cspan style=\"white-space: pre-wrap;\"\u003EDavid A. Mellis.\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003EСледующий шаг - установка файлов для поддержки ATtiny85. Переходим в меню \u003Ci\u003EИнструменты \u0026gt; Плата \u0026gt; Менеджер плат...\u003C\/i\u003E Чтобы не искать в списке интересующий нас пакет, отфильтруем его, введя в текстовом поле слово \u003Ci\u003Etiny.\u003C\/i\u003E\u0026nbsp;Выбираем пакет attiny by\u0026nbsp;\u003Cspan style=\"white-space: pre-wrap;\"\u003EDavid A. Mellis и нажимаем установить. После выполнения установки закрываем окно Менеджера плат:\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-wVG2pYKoRGg\/W9H1MK_f_9I\/AAAAAAAAAjM\/mkb8ws8P8sEwFdnPT-vOFt0fI6-C1QhkQCK4BGAYYCw\/s1600\/02.gif\" imageanchor=\"1\"\u003E\u003Cimg alt=\"Добавление поддержки ATtiny85 в IDE Arduino\" border=\"0\" height=\"496\" src=\"https:\/\/3.bp.blogspot.com\/-wVG2pYKoRGg\/W9H1MK_f_9I\/AAAAAAAAAjM\/mkb8ws8P8sEwFdnPT-vOFt0fI6-C1QhkQCK4BGAYYCw\/s640\/02.gif\" title=\"\" width=\"640\" \/\u003E\u003C\/a\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch3 style=\"text-align: left;\"\u003EПодключение ATtiny85 к программатору\u003C\/h3\u003E\u003Cdiv style=\"text-align: left;\"\u003EТехнология внутрисхемного программирования (ISP) использует линии интерфейса SPI. Поэтому выводы MOSI, MISO, SCK ATtiny85 подсоединяем к одноименным выводам Ардуино; вывод RESET ATtiny85 к цифровому выводу 10 Ардуино. Запитываем микроконтроллер от линий 5V и GND Ардуино. И, возможно, потребуется установить электролитический конденсатор между выводами Reset и GND Ардуино, чтобы предотвратить автоматическую перезагрузку. Ниже показаны распиновка микроконтроллера ATtiny85 и схема его подключения к Ардуино.\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-Wt3W2sOsEYY\/W9QMYx9UQWI\/AAAAAAAAAjc\/W4S6v27JLaccOpA9obJ7xZ-59QxZNlwGQCK4BGAYYCw\/s1600\/attiny85_pinout.png\" imageanchor=\"1\"\u003E\u003Cimg alt=\"ATtiny85 pinout\" border=\"0\" src=\"https:\/\/2.bp.blogspot.com\/-Wt3W2sOsEYY\/W9QMYx9UQWI\/AAAAAAAAAjc\/W4S6v27JLaccOpA9obJ7xZ-59QxZNlwGQCK4BGAYYCw\/s1600\/attiny85_pinout.png\" title=\"\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-liEA1bQkHFs\/W9QfkhbgtfI\/AAAAAAAAAj0\/nnG2FSyVF3Yk8RkAVHn1qUyPJjirOymugCK4BGAYYCw\/s1600\/tiny85%2BArduino.png\" imageanchor=\"1\"\u003E\u003Cimg alt=\"ATtiny85 прошивка\" border=\"0\" height=\"350\" src=\"https:\/\/1.bp.blogspot.com\/-liEA1bQkHFs\/W9QfkhbgtfI\/AAAAAAAAAj0\/nnG2FSyVF3Yk8RkAVHn1qUyPJjirOymugCK4BGAYYCw\/s640\/tiny85%2BArduino.png\" title=\"\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch3 style=\"text-align: left;\"\u003EЗагрузка скетча в ATtiny85\u003C\/h3\u003E\u003Cdiv style=\"text-align: left;\"\u003EОткроем скетч Blink из стандартных примеров Ардуино (меню \u003Ci\u003EФайл \u0026gt; Примеры \u0026gt; Basics \u0026gt; Blink\u003C\/i\u003E). Заменим в скетче текст\u0026nbsp;LED_BUILTIN на 0 в трех местах, должно получиться:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cpre class=\"hljs\" style=\"background: rgb(255 , 255 , 255); color: rgb(67 , 79 , 84); display: block; overflow-x: auto; padding: 0.5em;\"\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Esetup\u003C\/span\u003E() {\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ initialize digital pin LED_BUILTIN as an output.\u003C\/span\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003EpinMode\u003C\/span\u003E(\u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-literal\" style=\"color: rgb(211 , 84 , 0);\"\u003EOUTPUT\u003C\/span\u003E);\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eloop\u003C\/span\u003E() {\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003EdigitalWrite\u003C\/span\u003E(\u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-literal\" style=\"color: rgb(211 , 84 , 0);\"\u003EHIGH\u003C\/span\u003E);   \u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ turn the LED on (HIGH is the voltage level)\u003C\/span\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Edelay\u003C\/span\u003E(\u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E1000\u003C\/span\u003E);             \u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ wait for a second\u003C\/span\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003EdigitalWrite\u003C\/span\u003E(\u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-literal\" style=\"color: rgb(211 , 84 , 0);\"\u003ELOW\u003C\/span\u003E);    \u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ turn the LED off by making the voltage LOW\u003C\/span\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Edelay\u003C\/span\u003E(\u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E1000\u003C\/span\u003E);             \u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ wait for a second\u003C\/span\u003E\u003Cbr \/\u003E}\u003C\/pre\u003E\u003Cbr \/\u003EТеперь в списке плат выберем \u003Ci\u003EATtiny25\/45\/85\u003C\/i\u003E, конкретную модель микроконтроллера укажем в меню \u003Ci\u003EПроцессор\u003C\/i\u003E. В меню \u003Ci\u003EClock \u003C\/i\u003Eвыберем значение \u003Ci\u003EInternal 8MHz\u003C\/i\u003E. И, поскольку в качестве программатора мы используем Ардуино, выберем значение \u003Ci\u003EArduino as ISP\u003C\/i\u003E в меню \u003Ci\u003EПрограмматор\u003C\/i\u003E:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-kZSV46og6iI\/W9Q16wnwTiI\/AAAAAAAAAkA\/XEBeBae5nDMS52R_ueB1tN3ygCJ0RI_fgCK4BGAYYCw\/s1600\/03.gif\" imageanchor=\"1\"\u003E\u003Cimg alt=\"Программирование ATtiny85 в IDE Arduino\" border=\"0\" height=\"618\" src=\"https:\/\/2.bp.blogspot.com\/-kZSV46og6iI\/W9Q16wnwTiI\/AAAAAAAAAkA\/XEBeBae5nDMS52R_ueB1tN3ygCJ0RI_fgCK4BGAYYCw\/s640\/03.gif\" title=\"\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003EТеперь всё готово для загрузки скетча в ATtiny85. Подключаем Ардуино к компьютеру, нажимаем кнопку загрузки и дожидаемся сообщения о завершении операции.\u003Cbr \/\u003E\u003Cbr \/\u003EДля проверки работы скетча подключим к микроконтроллеру светодиод: длинным выводом к PB0, коротким к GND. Светодиод начнет мигать, только интервал составит не 1 секунду, а 8 (при условии, что мы имеем дело с новым\/чистым микроконтроллером). И вот почему: новые микроконтроллеры идут с завода с запрограммированным фьюзом CKDIV8 (Divide clock by 8), что приводит к делению тактовой частоты на 8. Поэтому сейчас мы сбросим данный фьюз, чтобы микроконтроллер работал на частоте 8МГц.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch3 style=\"text-align: left;\"\u003EИзменение тактовой частоты ATtiny85\u003C\/h3\u003EРаботу с фьюзами я уже описывал в статье \u003Ca href=\"https:\/\/tsibrov.blogspot.com\/2018\/08\/fuse-bits.html\" target=\"_blank\"\u003EЧто такое фьюзы. Чтение и запись фьюзов Ардуино\u003C\/a\u003E. Тогда для работы с ними использовалась программа avrdude. Но сейчас для сброса фьюза CKDIV8 мы поступим проще: установка конфигурационных байтов входит в процедуру записи загрузчика, поэтому в IDE Arduino переходим в меню \u003Ci\u003EИнструменты \u003C\/i\u003Eи выбираем команду \u003Ci\u003EЗаписать загрузчик\u003C\/i\u003E. В действительности запись загрузчика в микроконтроллер не произойдет, т.к. его просто нет в используемом нами пакете. Но зато будут перезаписаны конфигурационные байты, новые значения будут взяты из файла boards.txt, в них как раз бит\u0026nbsp;CKDIV8 сброшен. Также будет очищена память программ, поэтому скетч нужно будет загрузить в микроконтроллер еще раз.\u003Cbr \/\u003E\u003Cbr \/\u003EПосле выполнения указанных действий ATtiny85 заработает на частоте 8МГц и светодиод начнет мигать с интервалом в 1 секунду. Микроконтроллер можно отключить от Ардуино и запитать от источника 3-5В.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/4.bp.blogspot.com\/-JsN3ZsDPPhc\/W9SsgTVcFQI\/AAAAAAAAAkM\/ZwRdgxrDrrQ_G6_nTA7S2F-lQjlIhNiUgCK4BGAYYCw\/s1600\/04.gif\" imageanchor=\"1\"\u003E\u003Cimg border=\"0\" height=\"414\" src=\"https:\/\/4.bp.blogspot.com\/-JsN3ZsDPPhc\/W9SsgTVcFQI\/AAAAAAAAAkM\/ZwRdgxrDrrQ_G6_nTA7S2F-lQjlIhNiUgCK4BGAYYCw\/s640\/04.gif\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003EКогда вы в очередной раз захотите изменить тактовую частоту ATtiny85, нужно будет выбрать соответствующее значение в меню \u003Ci\u003EИнструменты \u0026gt; Clock\u003C\/i\u003E и повторно выполнить команду \u003Ci\u003EЗаписать загрузчик. \u003C\/i\u003EИ, как вы можете видеть, в меню выбора частоты доступно значение 16МГц - оно получается умножением тактовой частоты внутреннего RC-генератора (8МГц). Этой опцией не могут похвастаться даже старшие микроконтроллеры семейства mega. Такой способ тактирования применен в плате \u003Ca href=\"https:\/\/tsibrov.blogspot.com\/2018\/12\/digispark.html\" target=\"_blank\"\u003EDigispark\u003C\/a\u003E, построенной на ATtiny85.\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003EВместо заключения\u003C\/h2\u003EКак видите, программирование ATtiny85 в IDE Arduino не составляет труда. А после записи загрузчика оно станет еще проще и сможет быть выполнено без использования программатора. О том как это сделать читайте в статье \u003Ca href=\"https:\/\/tsibrov.blogspot.com\/2018\/12\/micronucleus-attiny85.html\" target=\"_blank\"\u003EПрошиваем загрузчик micronucleus в ATtiny85\u003C\/a\u003E.\u003C\/div\u003E\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"https:\/\/tsibrov.blogspot.com\/feeds\/5756005322299078524\/comments\/default","title":"Комментарии к сообщению"},{"rel":"replies","type":"text/html","href":"https:\/\/tsibrov.blogspot.com\/2018\/11\/attiny85-getting-started.html#comment-form","title":"Комментарии: 0"},{"rel":"edit","type":"application/atom+xml","href":"https:\/\/www.blogger.com\/feeds\/794788004739538112\/posts\/default\/5756005322299078524"},{"rel":"self","type":"application/atom+xml","href":"https:\/\/www.blogger.com\/feeds\/794788004739538112\/posts\/default\/5756005322299078524"},{"rel":"alternate","type":"text/html","href":"https:\/\/tsibrov.blogspot.com\/2018\/11\/attiny85-getting-started.html","title":"Знакомство с ATtiny85"}],"author":[{"name":{"$t":"Владимир"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/07943437233560370294"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"16","height":"16","src":"https:\/\/img1.blogblog.com\/img\/b16-rounded.gif"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"https:\/\/4.bp.blogspot.com\/-jNOnLfF4rGU\/W9QTE16axSI\/AAAAAAAAAjo\/WKVVAqGrFU0PbB0UbIWZkYJPp1JphzV1QCK4BGAYYCw\/s72-c\/attiny85.jpg","height":"72","width":"72"},"thr$total":{"$t":"0"}},{"id":{"$t":"tag:blogger.com,1999:blog-794788004739538112.post-4780808054013150817"},"published":{"$t":"2018-10-12T15:22:00.000+03:00"},"updated":{"$t":"2019-04-09T09:57:31.432+03:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"lcd"},{"scheme":"http://www.blogger.com/atom/ns#","term":"ардуино"},{"scheme":"http://www.blogger.com/atom/ns#","term":"энкодер вращения"}],"title":{"type":"text","$t":"LiquidCrystal_I2C_Ext - библиотека для создания меню на Ардуино"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003EЯ обратил внимание, что тема создания меню на Ардуино и ЖК дисплее весьма популярна. И ей уже посвящена одна из моих публикаций. Но я понимаю, что для новичков адаптация моего скетча может показаться нетривиальной задачей. Поэтому я решил написать библиотеку для создания меню на Ардуино и ЖК дисплее с I2C управлением, которую было бы легко использовать даже начинающему ардуинщику.\u003Cbr \/\u003E\u003Ca name='more'\u003E\u003C\/a\u003E\u003Cbr \/\u003EВ моем распоряжении имеется ЖК дисплей 20x4 с I2C интерфейсом, к сожалению без поддержки кириллицы. Для работы с ним нужна библиотека, я использую LiquidCrystal_I2C. И, чтобы моя библиотека не была отдельной надстройкой, завязанной на LiquidCrystal_I2C, я решил доработать последнюю, добавив в нее новые функции. И речь не только о создании меню: я добавил в библиотеку различные наработки, накопившиеся у меня за время работы с данным дисплеем.\u003Cbr \/\u003E\u003Cbr \/\u003EКак и прежде для навигации по меню необходим инкрементный энкодер с кнопкой, например, KY-040. Код для работы с ним был помещен непосредственно в библиотеку. Необходимо лишь указать к каким выводам Ардуино подключен энкодер.\u003Cbr \/\u003E\u003Cbr \/\u003EПолучившуюся библиотеку я назвал LiquidCrystal_I2C_Ext, скачать ее можно по ссылке\u0026nbsp;\u003Ca href=\"http:\/\/clc.la\/LiquidCrystal_I2C_Ext\" target=\"_blank\"\u003Ehttp:\/\/clc.la\/LiquidCrystal_I2C_Ext\u003C\/a\u003E . По сравнению с предшественницей в ней появились следующие функции:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cul style=\"text-align: left;\"\u003E\u003Cli\u003E\u003Cb\u003EprintAt(x, y, text)\u003C\/b\u003E – вывод текста на дисплей с указанной позиции.\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003Eprintf(format, …)\u003C\/b\u003E – форматированный вывод текста. Лично мне очень не хватало этой функции. Если раньше приходилось делать несколько вызовов print, или выводить текст в промежуточный буфер функцией sprintf, то сейчас достаточно одного вызова printf.\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003EprintfAt(x, y, format, …)\u003C\/b\u003E – форматированный вывод с указанной позиции.\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003EattachEncoder(pinA, pinB, pinBtn)\u003C\/b\u003E – сообщает библиотеке, к каким выводам Ардуино подключен энкодер. Должна быть вызвана перед использованием описанных далее функций.\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003EgetEncoderState()\u003C\/b\u003E – опрос состояния энкодера. Возвращает значение типа eEncoderState (перечисляемый тип, описан в библиотеке как {eNone, eLeft, eRight, eButton}).\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003EprintMultiline(text)\u003C\/b\u003E – вывод длинного текста с возможностью вертикальной прокрутки. Возврат из функции осуществляется при нажатии кнопки энкодера.\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003EinputVal(title, min, max, default, [step])\u003C\/b\u003E – ввод значения путем вращения ручки энкодера. title – заголовок; параметры min и max задают диапазон, в котором может изменяться значение; default – начальное значение; step –\u0026nbsp;величина приращения, по умолчанию равна 1. Выход из функции осуществляется при нажатии кнопки энкодера.\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003EinputValAt(x, y, min, max, default, [step])\u003C\/b\u003E – аналогична функции inputVal, но в отличие от нее не очищает дисплей при вызове и ввод значения осуществляется с указанной позиции. Данная функция может использоваться в паре с printf\/printfAt, когда требуется вывести не статичный заголовок.\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003EinputValBitwise(title, value, precision, [scale], [signed])\u003C\/b\u003E – в отличие от функции inputVal, которая подходит для ввода значений из небольшого диапазона, inputValBitwise позволяет вводить значения путем редактирования отдельных разрядов числа. Параметр title определяет заголовок; value – ссылка на переменную, в которую будет помещен результат ввода; precision – общее количество разрядов в числе; scale –\u0026nbsp;количество разрядов после запятой, значение по умолчанию 0; signed –\u0026nbsp;разрешает (при значении 1) или запрещает (при значении 0 –\u0026nbsp;по умолчанию) ввод отрицательных чисел. Функция возвращает 1, если пользователь подтвердил ввод, 0, если отказался.\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003EinputStrVal(title, buffer, length, available_symbols)\u003C\/b\u003E – аналогично функции inputValBitwise предоставляет возможность поразрядного ввода, но кроме цифр могут быть введены и другие символы. Параметр title определяет заголовок; buffer – ссылка на символьный буфер, в который будет помещен результат ввода; length – количество вводимых символов; параметр available_symbols –\u0026nbsp;это строка символов, доступных для ввода. Функция возвращает 1, если пользователь подтвердил ввод, 0, если отказался.\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003EselectVal(title, list_of_values, count, selected_index)\u003C\/b\u003E – позволяет выбрать значение из списка list и возвращает индекс выбранного элемента.\u0026nbsp; title – отображаемый на дисплее заголовок, list – список значений для выбора, представляет собой массив значений типа char*, String или int; count – количество элементов; selected_index – индекс выбранного по умолчанию элемента.\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003EshowMenu(menu, menu_length, show_title)\u003C\/b\u003E – отображает меню и возвращает ключ выбранного элемента. menu – массив элементов типа sMenuItem; menu_length – длина меню; show_title – признак необходимости отображения заголовка.\u003C\/li\u003E\u003C\/ul\u003E\u003Cbr \/\u003E\u003Ci\u003EОбращаю внимание тех, кто уже скачивал библиотеку ранее. С момента публикации данной статьи в библиотеку были внесены несколько значительных изменений. Например, больше нет функций inputIntVal и inputIntValAt, которые работали только с целыми числами, вместо них теперь доступны inputVal и inputValAt - они подходят как для ввода целых чисел, так и для ввода чисел с плавающей точкой. Аналогичные изменения были внесены в функцию поразрядного ввода чисел. Со временем я добавлю в библиотеку файл changelog для описания вносимых изменений. И, возможно, придется подобрать для библиотеки другое имя, поскольку\u0026nbsp;LiquidCrystal_I2C_Ext уже используется.\u003C\/i\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EЯ приведу несколько примеров с данными функциями, чтобы не осталось вопросов по их использованию.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003EprintAt, printf, printfAt\u003C\/h2\u003E\u003Cpre class=\"hljs\" style=\"background: rgb(255 , 255 , 255); color: rgb(67 , 79 , 84); display: block; overflow-x: auto; padding: 0.5em;\"\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;Wire.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;LiquidCrystal_I2C_Ext.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003ELiquidCrystal_I2C_Ext lcd(\u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E0x27\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E20\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E4\u003C\/span\u003E);\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Esetup\u003C\/span\u003E() {\u003Cbr \/\u003E  \u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Echar\u003C\/span\u003E hello[] = \u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"Hello, world!\"\u003C\/span\u003E;\u003Cbr \/\u003E  \u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003EString\u003C\/span\u003E s = \u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"String example\"\u003C\/span\u003E;\u003Cbr \/\u003E  lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Ebegin\u003C\/span\u003E();\u003Cbr \/\u003E  lcd.printf(\u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"millis=%lu\"\u003C\/span\u003E, \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Emillis\u003C\/span\u003E());\u003Cbr \/\u003E  lcd.printAt(\u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E3\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E1\u003C\/span\u003E, hello);\u003Cbr \/\u003E  lcd.printAt(\u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E2\u003C\/span\u003E, s);\u003Cbr \/\u003E  lcd.printfAt(\u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E3\u003C\/span\u003E, \u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"%s\"\u003C\/span\u003E, s.c_str());\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eloop\u003C\/span\u003E() {\u003Cbr \/\u003E\u003Cbr \/\u003E}\u003C\/pre\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EФункция printAt поддерживает те же типы данных, что и print: вы можете выводить на дисплей целые и дробные числа, текстовые строки (будь то массив символов или переменная типа String). А при работе с функциями форматированного вывода не забывайте, что они не поддерживают тип String и передавать им нужно указатель на строку в стиле Си. Для этого достаточно вызвать функцию c_str() класса String, в примере выше это показано.\u003Cbr \/\u003E\u003Cbr \/\u003EГоворя о форматированном выводе, хочу отметить еще один момент. Реализация функций семейства printf на Ардуино поддерживает не все команды форматирования. Это было сделано с целью уменьшить размер библиотеки. Лично я столкнулся с невозможностью указать в формате printf значения width и precision через переменную (т.е. через символ *).\u003Cbr \/\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003E\u003Cb\u003EattachEncoder, getEncoderState\u003C\/b\u003E\u003C\/h2\u003E\u003Cpre class=\"hljs\" style=\"background: rgb(255 , 255 , 255); color: rgb(67 , 79 , 84); display: block; overflow-x: auto; padding: 0.5em;\"\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;Wire.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;LiquidCrystal_I2C_Ext.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003ELiquidCrystal_I2C_Ext lcd(\u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E0x27\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E20\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E4\u003C\/span\u003E);\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ Пины для энкодера\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Edefine\u003C\/span\u003E pinCLK 2\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Edefine\u003C\/span\u003E pinDT  3\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Edefine\u003C\/span\u003E pinSW  4\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Eint\u003C\/span\u003E x = \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E0\u003C\/span\u003E; \u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ Счетчик\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Esetup\u003C\/span\u003E() {\u003Cbr \/\u003E  lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Ebegin\u003C\/span\u003E();\u003Cbr \/\u003E  lcd.attachEncoder(pinDT, pinCLK, pinSW);\u003Cbr \/\u003E  lcd.printfAt(\u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"%d \"\u003C\/span\u003E, x);\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eloop\u003C\/span\u003E() {\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ Опрашиваем состояние энкодера\u003C\/span\u003E\u003Cbr \/\u003E  eEncoderState EncoderState = lcd.getEncoderState();\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eswitch\u003C\/span\u003E (EncoderState) {\u003Cbr \/\u003E    \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Ecase\u003C\/span\u003E eLeft: \u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ При вращении влево уменьшаем счетчик\u003C\/span\u003E\u003Cbr \/\u003E      x--;\u003Cbr \/\u003E      \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Ebreak\u003C\/span\u003E;\u003Cbr \/\u003E    \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Ecase\u003C\/span\u003E eRight: \u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ При вращении вправо увеличиваем счетчик\u003C\/span\u003E\u003Cbr \/\u003E      x++;\u003Cbr \/\u003E      \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Ebreak\u003C\/span\u003E;\u003Cbr \/\u003E    \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Ecase\u003C\/span\u003E eButton: \u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ При нажатии обнуляем\u003C\/span\u003E\u003Cbr \/\u003E      x = \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E0\u003C\/span\u003E;\u003Cbr \/\u003E      \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Ebreak\u003C\/span\u003E;\u003Cbr \/\u003E    \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Ecase\u003C\/span\u003E eNone: \u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ Состояние энкодера не изменилось. Выходим из функции\u003C\/span\u003E\u003Cbr \/\u003E      \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Ereturn\u003C\/span\u003E;\u003Cbr \/\u003E  }\u003Cbr \/\u003E  lcd.printfAt(\u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"%d \"\u003C\/span\u003E, x); \u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ Выводим значение счетчика на дисплей\u003C\/span\u003E\u003Cbr \/\u003E}\u003C\/pre\u003E\u003Cbr \/\u003E\u003Cdiv\u003EВ данном примере выполняется подключение энкодера и опрос его состояния в цикле. При вращении энкодера изменяется значение переменной x и выводится на дисплей. Нажатие на кнопку приводит к обнулению переменной.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003EprintMultiline\u003C\/h2\u003E\u003Cpre class=\"hljs\" style=\"background: rgb(255 , 255 , 255); color: rgb(67 , 79 , 84); display: block; overflow-x: auto; padding: 0.5em;\"\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;avr\/pgmspace.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;Wire.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;LiquidCrystal_I2C_Ext.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003ELiquidCrystal_I2C_Ext lcd(\u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E0x27\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E20\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E4\u003C\/span\u003E);\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ Пины для энкодера\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Edefine\u003C\/span\u003E pinCLK 2\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Edefine\u003C\/span\u003E pinDT  3\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Edefine\u003C\/span\u003E pinSW  4\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Econst\u003C\/span\u003E \u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Echar\u003C\/span\u003E text_1[] PROGMEM = \u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"Using PROGMEM example\"\u003C\/span\u003E;\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Econst\u003C\/span\u003E \u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Echar\u003C\/span\u003E text_2[] PROGMEM = \u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"This text is stored in FLASH\"\u003C\/span\u003E;\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Econst\u003C\/span\u003E \u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Echar\u003C\/span\u003E* \u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Econst\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Etext\u003C\/span\u003E[] PROGMEM = {text_1, text_2};\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Esetup\u003C\/span\u003E() {\u003Cbr \/\u003E  lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Ebegin\u003C\/span\u003E();\u003Cbr \/\u003E  lcd.attachEncoder(pinDT, pinCLK, pinSW);\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eloop\u003C\/span\u003E() {\u003Cbr \/\u003E  \u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Echar\u003C\/span\u003E *\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Ebuffer\u003C\/span\u003E;\u003Cbr \/\u003E  lcd.printMultiline(\u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua\"\u003C\/span\u003E);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Ebuffer\u003C\/span\u003E = (\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Echar\u003C\/span\u003E*) malloc(\u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E30\u003C\/span\u003E); \u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ Выделяем память для чтения строки из памяти программ\u003C\/span\u003E\u003Cbr \/\u003E  strcpy_P(\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Ebuffer\u003C\/span\u003E, (\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Echar\u003C\/span\u003E*)pgm_read_word(\u0026amp;(\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Etext\u003C\/span\u003E[\u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E0\u003C\/span\u003E]))); \u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ Считываем строку из памяти программ\u003C\/span\u003E\u003Cbr \/\u003E  lcd.printMultiline(\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Ebuffer\u003C\/span\u003E); \u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ Выводим содержимое буфера на экран\u003C\/span\u003E\u003Cbr \/\u003E  strcpy_P(\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Ebuffer\u003C\/span\u003E, (\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Echar\u003C\/span\u003E*)pgm_read_word(\u0026amp;(\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Etext\u003C\/span\u003E[\u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E1\u003C\/span\u003E])));\u003Cbr \/\u003E  lcd.printMultiline(\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Ebuffer\u003C\/span\u003E);\u003Cbr \/\u003E  free(\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Ebuffer\u003C\/span\u003E); \u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ И освобождаем буфер\u003C\/span\u003E\u003Cbr \/\u003E  lcd.printMultiline(F(\u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"Using F() macro example. Press button to continue.\"\u003C\/span\u003E));\u003Cbr \/\u003E}\u003C\/pre\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: left;\"\u003EНа функции printMultiline нужно остановиться поподробнее. Она позволяет выводить на дисплей длинные строки с возможностью прокрутки. Но, объявив несколько таких строк в своем скетче, при компиляции вы можете заметить, как быстро они \"съедают\" память данных. Например, в Ардуино Уно для хранения данных доступно всего 2кб, тогда как для кода программы отведено 32кб. Поэтому при наличии в программе большого объема текстовых данных целесообразно разместить их в памяти программ. Для этого используется ключевое слово PROGMEM.\u0026nbsp;\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003EPROGMEM –\u0026nbsp;это модификатор переменных, он сообщает компилятору, что указанная переменная должна быть размещена не в памяти данных, а в памяти программ. Работает этот модификатор только с типами данных, объявленными в файле pgmspace.h, частью которой он является. Чтобы впоследствии процессор мог что-то сделать с этими данными, они должны быть скопированы из flash в SRAM. Для этого в примере выше выделяется буфер, в который происходит считывание строк. После того как данные выведены на дисплей буфер может быть освобожден.\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003EЕще один вариант размещения строки в памяти программ –\u0026nbsp;это использование макроса F() непосредственно в функции printMultiline. В примере это также показано.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003E\u003Cb\u003EinputVal, inputValAt\u003C\/b\u003E\u003C\/h2\u003E\u003Cpre class=\"hljs\" style=\"background: rgb(255 , 255 , 255); color: rgb(67 , 79 , 84); display: block; overflow-x: auto; padding: 0.5em;\"\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;Wire.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;LiquidCrystal_I2C_Ext.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003ELiquidCrystal_I2C_Ext lcd(\u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E0x27\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E20\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E4\u003C\/span\u003E);\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ Пины для энкодера\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Edefine\u003C\/span\u003E pinCLK 2\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Edefine\u003C\/span\u003E pinDT  3\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Edefine\u003C\/span\u003E pinSW  4\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Esetup\u003C\/span\u003E() {\u003Cbr \/\u003E  lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Ebegin\u003C\/span\u003E();\u003Cbr \/\u003E  lcd.attachEncoder(pinDT, pinCLK, pinSW);\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eloop\u003C\/span\u003E() {\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ Запрашиваем длину массива:\u003C\/span\u003E\u003Cbr \/\u003E  uint8_t len = lcd.inputVal(\u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"Input array len\"\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E5\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E10\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E8\u003C\/span\u003E);\u003Cbr \/\u003E  uint8_t A[len];\u003Cbr \/\u003E  uint8_t t;\u003Cbr \/\u003E  \u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ Запрашиваем элементы массива:\u003C\/span\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Efor\u003C\/span\u003E (uint8_t i = \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E0\u003C\/span\u003E; i \u0026lt; len; i++) {\u003Cbr \/\u003E    lcd.printfAt(\u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"Input A[%d]: \"\u003C\/span\u003E, i);\u003Cbr \/\u003E    A[i] = lcd.inputValAt(\u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E12\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E9\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E5\u003C\/span\u003E);\u003Cbr \/\u003E  }\u003Cbr \/\u003E  \u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ Сортируем массив:\u003C\/span\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Efor\u003C\/span\u003E (uint8_t i = \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E0\u003C\/span\u003E; i \u0026lt; len - \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E1\u003C\/span\u003E; i++) {\u003Cbr \/\u003E    \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Efor\u003C\/span\u003E (uint8_t j = i + \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E1\u003C\/span\u003E; j \u0026lt; len; j++) {\u003Cbr \/\u003E      \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eif\u003C\/span\u003E(A[i] \u0026gt; A[j]){\u003Cbr \/\u003E        t = A[i];\u003Cbr \/\u003E        A[i] = A[j];\u003Cbr \/\u003E        A[j] = t;\u003Cbr \/\u003E      }\u003Cbr \/\u003E    }\u003Cbr \/\u003E  }\u003Cbr \/\u003E  \u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ Выводим отсортированный массив на дисплей:\u003C\/span\u003E\u003Cbr \/\u003E  lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eclear\u003C\/span\u003E();\u003Cbr \/\u003E  lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eprint\u003C\/span\u003E(\u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"Sorted array:\"\u003C\/span\u003E);\u003Cbr \/\u003E  lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003EsetCursor\u003C\/span\u003E(\u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E1\u003C\/span\u003E);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Efor\u003C\/span\u003E (uint8_t i = \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E0\u003C\/span\u003E; i \u0026lt; len; i++)\u003Cbr \/\u003E    lcd.printf(\u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"%d \"\u003C\/span\u003E, A[i]);\u003Cbr \/\u003E  \u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ Для продолжения ждем нажатия кнопки:\u003C\/span\u003E\u003Cbr \/\u003E  lcd.printAt(\u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E2\u003C\/span\u003E, \u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"Press button\"\u003C\/span\u003E);\u003Cbr \/\u003E  lcd.printAt(\u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E3\u003C\/span\u003E, \u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"to continue\"\u003C\/span\u003E);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Ewhile\u003C\/span\u003E (lcd.getEncoderState() != eButton);\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/pre\u003E\u003Cbr \/\u003E\u003Cdiv\u003E\u003Cdiv style=\"text-align: left;\"\u003EДля демонстрации использования функций inputVal и inputValAt в данном примере предлагается ввести длину массива, а затем элементы массива. Введенный массив сортируется и выводится на дисплей. Отличие этих двух функций состоит в том, что inputValAt при вызове не очищает дисплей и позволяет предварительно вывести на дисплей заголовок, используя printf. В скетче выше это используется для отображения индекса вводимого элемента массива. \u003C\/div\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003E\u003Cb\u003EinputValBitwise\u003C\/b\u003E\u003C\/h2\u003E\u003Cpre class=\"hljs\" style=\"background: rgb(255 , 255 , 255); color: rgb(67 , 79 , 84); display: block; overflow-x: auto; padding: 0.5em;\"\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;Wire.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;LiquidCrystal_I2C_Ext.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003ELiquidCrystal_I2C_Ext lcd(\u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E0x27\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E20\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E4\u003C\/span\u003E);\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ Пины для энкодера\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Edefine\u003C\/span\u003E pinCLK 2\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Edefine\u003C\/span\u003E pinDT  3\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Edefine\u003C\/span\u003E pinSW  4\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Elong\u003C\/span\u003E v = \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E0\u003C\/span\u003E;\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Esetup\u003C\/span\u003E() {\u003Cbr \/\u003E  lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Ebegin\u003C\/span\u003E();\u003Cbr \/\u003E  lcd.attachEncoder(pinDT, pinCLK, pinSW);\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eloop\u003C\/span\u003E() {\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eif\u003C\/span\u003E (lcd.inputValBitwise(\u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"Input value\"\u003C\/span\u003E, v, \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E5\u003C\/span\u003E))\u003Cbr \/\u003E    lcd.printf(\u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"You entered %ld\"\u003C\/span\u003E, v);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eelse\u003C\/span\u003E\u003Cbr \/\u003E    lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eprint\u003C\/span\u003E(\u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"Input canceled\"\u003C\/span\u003E);\u003Cbr \/\u003E  lcd.printAt(\u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E2\u003C\/span\u003E, \u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"Press button\"\u003C\/span\u003E);\u003Cbr \/\u003E  lcd.printAt(\u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E3\u003C\/span\u003E, \u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"to continue\"\u003C\/span\u003E);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Ewhile\u003C\/span\u003E (lcd.getEncoderState() != eButton); \u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ Для продолжения ждем нажатия кнопки\u003C\/span\u003E\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/pre\u003E\u003Cbr \/\u003EВ данном скетче для ввода значения используется функция inputValBitwise. В параметрах функции присутствует заголовок, переменная, в которую будет помещено введенное значение, и количество разрядов для ввода. При подтверждении ввода на дисплей выводится соответствующее сообщение.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003E\u003Cb\u003EinputStrVal\u003C\/b\u003E\u003C\/h2\u003E\u003Cpre class=\"hljs\" style=\"background: rgb(255 , 255 , 255); color: rgb(67 , 79 , 84); display: block; overflow-x: auto; padding: 0.5em;\"\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;Wire.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;LiquidCrystal_I2C_Ext.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003ELiquidCrystal_I2C_Ext lcd(\u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E0x27\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E20\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E4\u003C\/span\u003E);\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ Пины для энкодера\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Edefine\u003C\/span\u003E pinCLK 2\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Edefine\u003C\/span\u003E pinDT  3\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Edefine\u003C\/span\u003E pinSW  4\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Echar\u003C\/span\u003E ip[] = \u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"192.168.001.001\"\u003C\/span\u003E;\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Esetup\u003C\/span\u003E() {\u003Cbr \/\u003E  lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Ebegin\u003C\/span\u003E();\u003Cbr \/\u003E  lcd.attachEncoder(pinDT, pinCLK, pinSW);\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eloop\u003C\/span\u003E() {\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eif\u003C\/span\u003E (lcd.inputStrVal(\u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"Input IP\"\u003C\/span\u003E, ip, \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E15\u003C\/span\u003E, \u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"0123456789\"\u003C\/span\u003E)){\u003Cbr \/\u003E    lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eprint\u003C\/span\u003E(\u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"You entered:\"\u003C\/span\u003E);\u003Cbr \/\u003E    lcd.printAt(\u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E1\u003C\/span\u003E, ip);\u003Cbr \/\u003E  }\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eelse\u003C\/span\u003E\u003Cbr \/\u003E    lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eprint\u003C\/span\u003E(\u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"Input canceled\"\u003C\/span\u003E);\u003Cbr \/\u003E  press_button_to_continue();\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Evoid\u003C\/span\u003E press_button_to_continue(){\u003Cbr \/\u003E  lcd.printAt(\u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E2\u003C\/span\u003E, \u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"Press button\"\u003C\/span\u003E);\u003Cbr \/\u003E  lcd.printAt(\u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E3\u003C\/span\u003E, \u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"to continue\"\u003C\/span\u003E);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Ewhile\u003C\/span\u003E (lcd.getEncoderState() != eButton);\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/pre\u003E\u003Cbr \/\u003EЗдесь функция inputStrVal используется для ввода IP адреса. При вызове функции содержимое переданного буфера рассматривается как значение по умолчанию и выводится на дисплей. Последний параметр функции определяет разрешенные для ввода символы, в данном случае только цифры.\u0026nbsp;Если буфер содержит символы, которые не могут быть введены, то их не удастся изменить. Таким образом можно реализовать маскированный ввод.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003E\u003Cb\u003EselectVal\u003C\/b\u003E\u003C\/h2\u003E\u003Cpre class=\"hljs\" style=\"background: rgb(255 , 255 , 255); color: rgb(67 , 79 , 84); display: block; overflow-x: auto; padding: 0.5em;\"\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;Wire.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;LiquidCrystal_I2C_Ext.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003ELiquidCrystal_I2C_Ext lcd(\u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E0x27\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E20\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E4\u003C\/span\u003E);\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ Пины для энкодера\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Edefine\u003C\/span\u003E pinCLK 2\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Edefine\u003C\/span\u003E pinDT  3\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Edefine\u003C\/span\u003E pinSW  4\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Esetup\u003C\/span\u003E() {\u003Cbr \/\u003E  lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Ebegin\u003C\/span\u003E();\u003Cbr \/\u003E  lcd.attachEncoder(pinDT, pinCLK, pinSW);\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eloop\u003C\/span\u003E() {\u003Cbr \/\u003E  \u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Eint\u003C\/span\u003E index;\u003Cbr \/\u003E  \u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003EString\u003C\/span\u003E list[] = {\u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"Off\"\u003C\/span\u003E, \u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"On\"\u003C\/span\u003E};\u003Cbr \/\u003E  index = lcd.selectVal(\u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"Turn backlight\"\u003C\/span\u003E, list, \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E2\u003C\/span\u003E, lcd.getBacklight());\u003Cbr \/\u003E  lcd.setBacklight(index);\u003Cbr \/\u003E  lcd.printf(\u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"Backlight turned %s\"\u003C\/span\u003E, list[index].c_str());\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Edelay\u003C\/span\u003E(\u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E2000\u003C\/span\u003E);\u003Cbr \/\u003E}\u003C\/pre\u003E\u003Cbr \/\u003EФункция selectVal очень полезна при выборе значения из списка. Эта задача может быть решена и с использованием меню, но преимущество функции selectVal состоит в том, что она не только позволяет выбрать значение, но еще и показывает текущее выбранное значение. Функция работает с массивами значений типа char*, String или int и возвращает индекс выбранного элемента.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003E\u003Cb\u003EshowMenu\u003C\/b\u003E\u003C\/h2\u003E\u003Cpre class=\"hljs\" style=\"background: rgb(255 , 255 , 255); color: rgb(67 , 79 , 84); display: block; overflow-x: auto; padding: 0.5em;\"\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;Wire.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;LiquidCrystal_I2C_Ext.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003ELiquidCrystal_I2C_Ext lcd(\u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E0x27\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E20\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E4\u003C\/span\u003E);\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ Пины для энкодера\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Edefine\u003C\/span\u003E pinCLK 2\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Edefine\u003C\/span\u003E pinDT  3\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Edefine\u003C\/span\u003E pinSW  4\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ Перечислим значения, используемые в меню для задания связи родитель-потомок\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Eenum\u003C\/span\u003E {mkBack, mkRoot, mkRun, mkOptions, mkMode, mkSpeed, mkLog, mkSelftest, mkHelp, mkFAQ, mkIndex, mkAbout};\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ Опишем меню\u003C\/span\u003E\u003Cbr \/\u003EsMenuItem menu[] = {\u003Cbr \/\u003E  {mkBack, mkRoot, \u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"Menu demo\"\u003C\/span\u003E},\u003Cbr \/\u003E    {mkRoot, mkRun, \u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"Run\"\u003C\/span\u003E},\u003Cbr \/\u003E    {mkRoot, mkOptions, \u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"Options\"\u003C\/span\u003E},\u003Cbr \/\u003E      {mkOptions, mkMode, \u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"Mode\"\u003C\/span\u003E},\u003Cbr \/\u003E      {mkOptions, mkSpeed, \u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"Speed\"\u003C\/span\u003E},\u003Cbr \/\u003E      {mkOptions, mkLog, \u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"Print log\"\u003C\/span\u003E},\u003Cbr \/\u003E      {mkOptions, mkSelftest, \u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"Selftest\"\u003C\/span\u003E},\u003Cbr \/\u003E      {mkOptions, mkBack, \u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"Back\"\u003C\/span\u003E},\u003Cbr \/\u003E    {mkRoot, mkHelp, \u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"Help\"\u003C\/span\u003E},\u003Cbr \/\u003E      {mkHelp, mkFAQ, \u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"FAQ\"\u003C\/span\u003E},\u003Cbr \/\u003E      {mkHelp, mkIndex, \u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"Index\"\u003C\/span\u003E},\u003Cbr \/\u003E      {mkHelp, mkAbout, \u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"About\"\u003C\/span\u003E},\u003Cbr \/\u003E      {mkHelp, mkBack, \u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"Back\"\u003C\/span\u003E},\u003Cbr \/\u003E    {mkRoot, mkBack, \u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"Exit menu\"\u003C\/span\u003E}\u003Cbr \/\u003E};\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ Определим колчество элементов в меню\u003C\/span\u003E\u003Cbr \/\u003Euint8_t menuLen = \u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Esizeof\u003C\/span\u003E(menu) \/ \u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Esizeof\u003C\/span\u003E(sMenuItem);\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Esetup\u003C\/span\u003E() {\u003Cbr \/\u003E  lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Ebegin\u003C\/span\u003E();\u003Cbr \/\u003E  lcd.attachEncoder(pinDT, pinCLK, pinSW);\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eloop\u003C\/span\u003E() {\u003Cbr \/\u003E  uint8_t selectedMenuItem = lcd.showMenu(menu, menuLen, \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E1\u003C\/span\u003E);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eif\u003C\/span\u003E (selectedMenuItem == mkRun)\u003Cbr \/\u003E    lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eprint\u003C\/span\u003E(\u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"Run selected\"\u003C\/span\u003E);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eelse\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eif\u003C\/span\u003E (selectedMenuItem == mkMode)\u003Cbr \/\u003E    lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eprint\u003C\/span\u003E(\u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"Mode selected\"\u003C\/span\u003E);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eelse\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eif\u003C\/span\u003E (selectedMenuItem == mkSpeed)\u003Cbr \/\u003E    lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eprint\u003C\/span\u003E(\u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"Speed selected\"\u003C\/span\u003E);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eelse\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eif\u003C\/span\u003E (selectedMenuItem == mkLog)\u003Cbr \/\u003E    lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eprint\u003C\/span\u003E(\u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"Print log selected\"\u003C\/span\u003E);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eelse\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eif\u003C\/span\u003E (selectedMenuItem == mkSelftest)\u003Cbr \/\u003E    lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eprint\u003C\/span\u003E(\u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"Selftest selected\"\u003C\/span\u003E);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eelse\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eif\u003C\/span\u003E (selectedMenuItem == mkFAQ)\u003Cbr \/\u003E    lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eprint\u003C\/span\u003E(\u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"FAQ selected\"\u003C\/span\u003E);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eelse\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eif\u003C\/span\u003E (selectedMenuItem == mkIndex)\u003Cbr \/\u003E    lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eprint\u003C\/span\u003E(\u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"Index selected\"\u003C\/span\u003E);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eelse\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eif\u003C\/span\u003E (selectedMenuItem == mkAbout)\u003Cbr \/\u003E    lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eprint\u003C\/span\u003E(\u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"About selected\"\u003C\/span\u003E);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eelse\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eif\u003C\/span\u003E (selectedMenuItem == mkBack)\u003Cbr \/\u003E    lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eprint\u003C\/span\u003E(\u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"Exit selected\"\u003C\/span\u003E);\u003Cbr \/\u003E\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Edelay\u003C\/span\u003E(\u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E2000\u003C\/span\u003E);\u003Cbr \/\u003E}\u003C\/pre\u003E\u003Cbr \/\u003EНу и, наконец, последняя функция –\u0026nbsp;showMenu, которая берет на себя отрисовку меню и навигацию по нему. Работу с ней можно разделить на 3 этапа. Сначала нужно описать меню. Для этого в библиотеке определена структура sMenuItem:\u003Cbr \/\u003E\u003Cpre class=\"hljs\" style=\"background: rgb(255 , 255 , 255); color: rgb(67 , 79 , 84); display: block; overflow-x: auto; padding: 0.5em;\"\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Estruct\u003C\/span\u003E sMenuItem {\u003Cbr \/\u003E  uint8_t parent;\u003Cbr \/\u003E  uint8_t key;\u003Cbr \/\u003E  \u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Echar\u003C\/span\u003E    *caption;\u003Cbr \/\u003E};\u003C\/pre\u003E\u003Cbr \/\u003EПараметры parent и key служат для задания иерархии, caption –\u0026nbsp;указатель на название элемента меню. В примере показано, как описывается меню в виде массива элементов sMenuItem.\u003Cbr \/\u003E\u003Cbr \/\u003EВ качестве parent и key могут быть использованы целочисленные значения, начиная с 1. Но гораздо удобнее определить для них символьные имена, т.е. работать с перечислением. Обратите внимание на то, что первым в перечислении определено значение mkBack, ему соответствует значение 0. Данное значение является служебным и используется для пунктов меню, отвечающих за возврат на уровень выше.\u003Cbr \/\u003E\u003Cbr \/\u003EСледующий этап –\u0026nbsp;вызов функции showMenu. Ее параметрами являются описанное ранее меню, его длина и признак отвечающий за вывод заголовка.\u003Cbr \/\u003E\u003Cbr \/\u003EПри выборе пункта меню, не имеющего подменю, функция возвращает соответствующее ему значение key. И остается последний этап –\u0026nbsp;проанализировать вернувшееся значение при помощи if или case и выполнить соответствующее выбранному элементу действие.\u003Cbr \/\u003E\u003Cbr \/\u003EПо-моему, получилась интересная библиотека.\u0026nbsp; Есть некоторые вещи, которые хотелось бы доработать (например, в меню нет прокрутки длинных названий),\u0026nbsp; но я решил их пока отложить, т.к. сейчас занимаюсь другими проектами. В общем скачивайте, пробуйте, оставляйте комментарии.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"https:\/\/tsibrov.blogspot.com\/feeds\/4780808054013150817\/comments\/default","title":"Комментарии к сообщению"},{"rel":"replies","type":"text/html","href":"https:\/\/tsibrov.blogspot.com\/2018\/10\/LiquidCrystalI2CExt.html#comment-form","title":"Комментарии: 67"},{"rel":"edit","type":"application/atom+xml","href":"https:\/\/www.blogger.com\/feeds\/794788004739538112\/posts\/default\/4780808054013150817"},{"rel":"self","type":"application/atom+xml","href":"https:\/\/www.blogger.com\/feeds\/794788004739538112\/posts\/default\/4780808054013150817"},{"rel":"alternate","type":"text/html","href":"https:\/\/tsibrov.blogspot.com\/2018\/10\/LiquidCrystalI2CExt.html","title":"LiquidCrystal_I2C_Ext - библиотека для создания меню на Ардуино"}],"author":[{"name":{"$t":"Владимир"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/07943437233560370294"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"16","height":"16","src":"https:\/\/img1.blogblog.com\/img\/b16-rounded.gif"}}],"thr$total":{"$t":"67"}},{"id":{"$t":"tag:blogger.com,1999:blog-794788004739538112.post-4650388700982764881"},"published":{"$t":"2018-10-10T18:28:00.000+03:00"},"updated":{"$t":"2019-03-20T22:40:47.113+03:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"spi"},{"scheme":"http://www.blogger.com/atom/ns#","term":"ардуино"},{"scheme":"http://www.blogger.com/atom/ns#","term":"программатор"}],"title":{"type":"text","$t":"Прошивка USBasp"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-rqTmB6jpMKg\/W6-_oMy3dqI\/AAAAAAAAAiA\/FlKGBMR_E90OEGqt9w-5b9qvXyg8VnukgCK4BGAYYCw\/s1600\/USBasp%2Bwarning.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg alt=\"avrdude: warning: cannot set sck period, please check for usbasp firmware update\" border=\"0\" height=\"192\" src=\"https:\/\/1.bp.blogspot.com\/-rqTmB6jpMKg\/W6-_oMy3dqI\/AAAAAAAAAiA\/FlKGBMR_E90OEGqt9w-5b9qvXyg8VnukgCK4BGAYYCw\/s640\/USBasp%2Bwarning.png\" title=\"\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003EЕсли при использовании USBasp в логе avrdude у вас появляется сообщение\u003Cbr \/\u003E\u003Cb\u003Eavrdude: warning: cannot set sck period, please check for usbasp firmware update\u003C\/b\u003E, но при этом программатор исправно выполняет команды, то, скорее всего, проблема в устаревшей прошивке USBasp. В этой статье я по шагам расскажу, как обновить прошивку USBasp, используя Ардуино в качестве программатора.\u003Cbr \/\u003E\u003Ca name='more'\u003E\u003C\/a\u003E\u003Cbr \/\u003E\u003Ch3 style=\"text-align: left;\"\u003E1. Подготовка Ардуино\u003C\/h3\u003EВ качестве программатора можно использовать любую имеющуюся плату Ардуино. Для этого подключаем ее к компьютеру и загружаем в нее скетч ArduinoISP из стандартных примеров:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"https:\/\/2.bp.blogspot.com\/-x2vCNd2xVn4\/W09lmLgEqCI\/AAAAAAAAAcc\/vmMwthLFf-I4mtH5Eqn-xKiSDB-zVYO3ACPcBGAYYCw\/s1600\/ArduinoISP%2Bexample.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg alt=\"ArduinoISP sketch file\" border=\"0\" data-original-height=\"523\" data-original-width=\"592\" src=\"https:\/\/2.bp.blogspot.com\/-x2vCNd2xVn4\/W09lmLgEqCI\/AAAAAAAAAcc\/vmMwthLFf-I4mtH5Eqn-xKiSDB-zVYO3ACPcBGAYYCw\/s1600\/ArduinoISP%2Bexample.png\" title=\"\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch3 style=\"text-align: left;\"\u003E2. Подключение USBasp к Ардуино\u003C\/h3\u003EМикроконтроллеры семейства AVR, а значит и базирующиеся на них платы (как Ардуино, так и USBasp) поддерживают программирование по \u003Ca href=\"https:\/\/tsibrov.blogspot.com\/2018\/07\/arduino-as-isp.html#%D0%A7%D1%82%D0%BE%20%D1%82%D0%B0%D0%BA%D0%BE%D0%B5%20ISP\"\u003EISP-технологии\u003C\/a\u003E\u0026nbsp;с использованием линий связи SPI. Поэтому сейчас нам нужно:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cul style=\"text-align: left;\"\u003E\u003Cli\u003Eсоединить выводы Ардуино MOSI, MISO, SCK GND и VCC (5В или 3.3В) с одноименными выводами USBasp;\u003C\/li\u003E\u003Cli\u003Eцифровой вывод 10 Ардуино подключить к выводу RESET USBasp;\u003C\/li\u003E\u003Cli\u003Eустановить электролитический конденсатор на 10мкФ между RESET\u0026nbsp;и GND Ардуино, чтобы предотвратить автоматическую перезагрузку. Хотя возможно будет работать и без конденсатора, зависит от используемой платы Ардуино.\u003C\/li\u003E\u003C\/ul\u003EДля подключения можете использовать как ICSP разъем\u0026nbsp;Ардуино, так и цифровые выводы - не принципиально. Я, например, взял MOSI, MISO, SCK, GND и VCC с ICSP разъема:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-FtnKcTbQw-Y\/W7zFj3YsSPI\/AAAAAAAAAiQ\/R77wXPRSZwAq1hMNVoCF6SPn3xMK7gKQQCK4BGAYYCw\/s1600\/20181005_080909.jpg\" imageanchor=\"1\"\u003E\u003Cimg alt=\"Обновление прошивки USBasp через Ардуино\" border=\"0\" height=\"360\" src=\"https:\/\/2.bp.blogspot.com\/-FtnKcTbQw-Y\/W7zFj3YsSPI\/AAAAAAAAAiQ\/R77wXPRSZwAq1hMNVoCF6SPn3xMK7gKQQCK4BGAYYCw\/s640\/20181005_080909.jpg\" title=\"\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003EНа всякий случай приведу таблицу соответствия сигналов MOSI, MISO и SCK цифровым выводам различных плат Ардуино:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv\u003E\u003Ctable align=\"center\" style=\"height: 289px; width: 598px;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Cth style=\"width: 217px;\"\u003EПлата Ардуино\u003C\/th\u003E\u003Cth style=\"width: 117px;\"\u003EMOSI\u003C\/th\u003E\u003Cth style=\"width: 118px;\"\u003EMISO\u003C\/th\u003E\u003Cth style=\"width: 118px;\"\u003ESCK\u003C\/th\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"width: 217px;\"\u003EUno, Duemilanove\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 117px;\"\u003E11 или ICSP-4\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 118px;\"\u003E12 или ICSP-1\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 118px;\"\u003E13 или ICSP-3\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"width: 217px;\"\u003ENano\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 117px;\"\u003E11 или ICSP-4\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 118px;\"\u003E12 или ICSP-1\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 118px;\"\u003E13 или ICSP-3\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"width: 217px;\"\u003EPro Mini\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 117px;\"\u003E11\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 118px;\"\u003E12\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 118px;\"\u003E13\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"width: 217px;\"\u003EMega1280, Mega2560\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 117px;\"\u003E51 или ICSP-4\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 118px;\"\u003E50 или ICSP-1\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 118px;\"\u003E52 или ICSP-3\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"width: 217px;\"\u003ELeonardo\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 117px;\"\u003EICSP-4\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 118px;\"\u003EICSP-1\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 118px;\"\u003EICSP-3\u0026nbsp;\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"width: 217px;\"\u003EDue\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 117px;\"\u003EICSP-4\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 118px;\"\u003EICSP-1\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 118px;\"\u003EICSP-3\u0026nbsp;\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"width: 217px;\"\u003EZero\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 117px;\"\u003EICSP-4\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 118px;\"\u003EICSP-1\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 118px;\"\u003EICSP-3\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"width: 217px;\"\u003E101\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 117px;\"\u003E11 или ICSP-4\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 118px;\"\u003E12 или ICSP-1\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 118px;\"\u003E13 или ICSP-3\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Ch3 style=\"text-align: left;\"\u003E3. Установка джампера JP2 на USBasp\u003C\/h3\u003EНа плате USBasp присутствуют 3 джампера, хотя распаян у вас, скорее всего, будет только JP1 - выбор напряжения питания программируемого микроконтроллера. \u003Cb\u003EДля прошивки USBasp (и любых других манипуляций с ним при помощи программатора) необходимо установить джампер JP2.\u003C\/b\u003E\u0026nbsp;Советую не мучиться с замыканием контактов подручными средствами и впаять пару штырьков, так будет надежней:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-IOqIbdOo9jQ\/W7zIdZ8GVdI\/AAAAAAAAAic\/7mecHCV0Tj4JyWbG2UVxz6U48ngSJgwWQCK4BGAYYCw\/s1600\/USBasp%2BJumper%2BFlash.jpg\" imageanchor=\"1\"\u003E\u003Cimg border=\"0\" height=\"228\" src=\"https:\/\/2.bp.blogspot.com\/-IOqIbdOo9jQ\/W7zIdZ8GVdI\/AAAAAAAAAic\/7mecHCV0Tj4JyWbG2UVxz6U48ngSJgwWQCK4BGAYYCw\/s640\/USBasp%2BJumper%2BFlash.jpg\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Ch3 style=\"text-align: left;\"\u003E4. Скачивание прошивки\u003C\/h3\u003E\u003Cdiv\u003EЗаходим на страничку автора USBasp\u0026nbsp;\u003Ca href=\"https:\/\/www.fischl.de\/usbasp\/\" target=\"_blank\"\u003Ehttps:\/\/www.fischl.de\/usbasp\/\u003C\/a\u003E и скачиваем последнюю версию прошивки в разделе\u0026nbsp;Download - Firmware and circuit. На момент написания данной статьи актуальной является версия от 28.05.2011. Файлы прошивки находятся внутри архива по пути \u003Ci\u003E\\usbasp.2011-05-28\\bin\\firmware\\\u003C\/i\u003E, их там три штуки, для каждого типа микроконтроллера (программатор USBasp может быть построен на базе ATmega8, ATmega48 или ATmega88). У меня в USBasp установлен микроконтроллер ATmega8, поэтому я буду использовать файл\u0026nbsp;usbasp.atmega8.2011-05-28.hex.\u003Cbr \/\u003E\u003Cbr \/\u003EПрошивать USBasp будем при помощи уже знакомого нам avrdude, входящего в состав IDE Arduino. Файл прошивки нужно поместить в каталог avrdude, чтобы потом не пришлось указывать полный путь к нему. Для этого запускаем Проводник Windows и переходим в каталог\u0026nbsp;\u003Ci\u003EArduino_dir\\hardware\\tools\\avr\\bin\\\u003C\/i\u003E, где\u0026nbsp;\u003Ci\u003EArduino_dir\u0026nbsp;\u003C\/i\u003E- это путь к IDE Arduino. В моем случае он выглядит так: \u003Ci\u003Ed:\\Arduino\\arduino-1.6.12\\hardware\\tools\\avr\\bin\\\u003C\/i\u003E, сюда я копирую файл usbasp.atmega8.2011-05-28.hex.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch3 style=\"text-align: left;\"\u003E5. Прошивка USBasp\u003C\/h3\u003EПосле копирования файла прошивки в каталог avrdude поместите курсор в адресную строку Проводника, удалите из нее путь, введите cmd и нажмите Enter.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-SvjW9WeU_a0\/W7zWkRR_IHI\/AAAAAAAAAio\/qf56coGr4rUx5LQwdk6MdtdExRvUL6-5gCK4BGAYYCw\/s1600\/avrdude%2Bcmd.png\" imageanchor=\"1\"\u003E\u003Cimg border=\"0\" height=\"211\" src=\"https:\/\/3.bp.blogspot.com\/-SvjW9WeU_a0\/W7zWkRR_IHI\/AAAAAAAAAio\/qf56coGr4rUx5LQwdk6MdtdExRvUL6-5gCK4BGAYYCw\/s640\/avrdude%2Bcmd.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EЗапустится интерпретатор командной строки. В нем нужно ввести команду:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cb\u003Eavrdude -C ..\\etc\\avrdude.conf -p m8 -c arduino -P com18 -b 19200 -U flash:w:usbasp.atmega8.2011-05-28.hex\u003C\/b\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EНе забудьте проверить и с корректировать ее параметры:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cb\u003E-C ..\\etc\\avrdude.conf\u003C\/b\u003E\u0026nbsp;- путь к конфигурационному файлу (без этого параметра avrdude иногда ругается: can't open config file \"\": Invalid argument)\u003Cbr \/\u003E\u003Cb\u003E\u003Cbr \/\u003E\u003C\/b\u003E\u003Cb\u003E-p m8\u003C\/b\u003E - определяет тип микроконтроллера. Значение m8 сообщает avrdude о том, что мы собираемся работать с ATmega8. Если у вас в USBasp установлен ATmega48 или ATmega88, то замените это значение на m48 или m88 соответственно.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cb\u003E-P com18\u003C\/b\u003E - определяет COM порт, присвоенный плате Ардуино. У меня это com18, вам нужно подставить свое значение.\u003Cbr \/\u003E\u003Cb\u003E\u003Cbr \/\u003E\u003C\/b\u003E\u003Cb\u003E-U flash:w:usbasp.atmega8.2011-05-28.hex\u003C\/b\u003E - определяет действие, которое мы хотим выполнить. В данном случае мы хотим записать в FLASH память данные из файла usbasp.atmega8.2011-05-28.hex. При необходимости скорректируйте имя файла прошивки в соответствии с типом микроконтроллера в USBasp.\u003Cbr \/\u003E\u003Cbr \/\u003EУбедитесь, что команда набрана верно и программатор правильно соединен с Ардуино. После этого подключаем Ардуино к компьютеру и нажимаем Enter в интерпретаторе командной строки. Должен отобразиться прогресс перезаписи содержимого FLASH памяти, а затем сообщение об успешном выполнении команды - avrdude done. Thank you:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-H5g0APyL8ps\/W74WX11_sAI\/AAAAAAAAAi0\/Bo7jry4vnhoGVBkivhdUcwSFmBm6_1AIgCK4BGAYYCw\/s1600\/USBasp%2Bflashing.png\" imageanchor=\"1\"\u003E\u003Cimg border=\"0\" height=\"350\" src=\"https:\/\/3.bp.blogspot.com\/-H5g0APyL8ps\/W74WX11_sAI\/AAAAAAAAAi0\/Bo7jry4vnhoGVBkivhdUcwSFmBm6_1AIgCK4BGAYYCw\/s640\/USBasp%2Bflashing.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003EТеперь можно отключить USBasp от Ардуино, снять джампер JP2 и проверить работу программатора. Сообщения\u0026nbsp;\u003Cb\u003Eavrdude: warning: cannot set sck period, please check for usbasp firmware update\u003C\/b\u003E больше быть не должно.\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"https:\/\/tsibrov.blogspot.com\/feeds\/4650388700982764881\/comments\/default","title":"Комментарии к сообщению"},{"rel":"replies","type":"text/html","href":"https:\/\/tsibrov.blogspot.com\/2018\/10\/usbasp-firmware-update.html#comment-form","title":"Комментарии: 33"},{"rel":"edit","type":"application/atom+xml","href":"https:\/\/www.blogger.com\/feeds\/794788004739538112\/posts\/default\/4650388700982764881"},{"rel":"self","type":"application/atom+xml","href":"https:\/\/www.blogger.com\/feeds\/794788004739538112\/posts\/default\/4650388700982764881"},{"rel":"alternate","type":"text/html","href":"https:\/\/tsibrov.blogspot.com\/2018\/10\/usbasp-firmware-update.html","title":"Прошивка USBasp"}],"author":[{"name":{"$t":"Владимир"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/07943437233560370294"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"16","height":"16","src":"https:\/\/img1.blogblog.com\/img\/b16-rounded.gif"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"https:\/\/1.bp.blogspot.com\/-rqTmB6jpMKg\/W6-_oMy3dqI\/AAAAAAAAAiA\/FlKGBMR_E90OEGqt9w-5b9qvXyg8VnukgCK4BGAYYCw\/s72-c\/USBasp%2Bwarning.png","height":"72","width":"72"},"thr$total":{"$t":"33"}},{"id":{"$t":"tag:blogger.com,1999:blog-794788004739538112.post-7936050979708386804"},"published":{"$t":"2018-09-13T16:52:00.000+03:00"},"updated":{"$t":"2019-04-08T23:33:32.288+03:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"ардуино"},{"scheme":"http://www.blogger.com/atom/ns#","term":"подключение"},{"scheme":"http://www.blogger.com/atom/ns#","term":"программатор"}],"title":{"type":"text","$t":"Программатор USBasp"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-T-1L_bniogI\/W5bD2um4r-I\/AAAAAAAAAfg\/nVIjf7506DknMb9eyvXGvuokSo5zeX-6ACK4BGAYYCw\/s1600\/AC-PG-USBASP.jpg\" imageanchor=\"1\"\u003E\u003Cimg alt=\"Программатор USBasp\" border=\"0\" height=\"320\" src=\"https:\/\/3.bp.blogspot.com\/-T-1L_bniogI\/W5bD2um4r-I\/AAAAAAAAAfg\/nVIjf7506DknMb9eyvXGvuokSo5zeX-6ACK4BGAYYCw\/s320\/AC-PG-USBASP.jpg\" title=\"\" width=\"320\" \/\u003E\u003C\/a\u003E\u003C\/div\u003EСегодня речь пойдет о программаторе USBasp - популярном программаторе\u0026nbsp;для микроконтроллеров фирмы Atmel серии AVR. Как заявляет его создатель на \u003Ca href=\"https:\/\/www.fischl.de\/usbasp\/\" target=\"_blank\"\u003Eдомашней странице проекта\u003C\/a\u003E, USBasp работает на различных платформах (Windows, Linux, Mac OS X), не требует дополнительных компонентов и обеспечивает скорость программирования до 5 кбит\/с. Кроме того его схема довольно проста и желающие могут собрать этот программатор самостоятельно. Либо можно заказать готовый на Aliexpress, как\u0026nbsp;я и поступил. Обошелся он\u0026nbsp;мне в $1.70 вместе с переходником на ICSP разъем.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ca name='more'\u003E\u003C\/a\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Ch2 style=\"text-align: left;\"\u003EСодержание\u003C\/h2\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Ca href=\"https:\/\/tsibrov.blogspot.com\/2018\/09\/usbasp.html#%D0%9F%D0%BE%D0%B4%D0%BA%D0%BB%D1%8E%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B0%D1%82%D0%BE%D1%80%D0%B0%20USBasp%20%D0%BA%20%D0%90%D1%80%D0%B4%D1%83%D0%B8%D0%BD%D0%BE\"\u003EПодключение программатора USBasp к Ардуино\u003C\/a\u003E\u003Cbr \/\u003E\u003Ca href=\"https:\/\/tsibrov.blogspot.com\/2018\/09\/usbasp.html#%D0%94%D1%80%D0%B0%D0%B9%D0%B2%D0%B5%D1%80%D0%B0%20%D0%B4%D0%BB%D1%8F%20USBasp\"\u003EДрайвера для USBasp\u003C\/a\u003E\u003Cbr \/\u003E\u003Ca href=\"https:\/\/tsibrov.blogspot.com\/2018\/09\/usbasp.html#%D0%A7%D1%82%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%B8%20%D0%B7%D0%B0%D0%BF%D0%B8%D1%81%D1%8C%20%D1%84%D1%8C%D1%8E%D0%B7%D0%BE%D0%B2%20%D0%90%D1%80%D0%B4%D1%83%D0%B8%D0%BD%D0%BE\"\u003EЧтение и запись фьюзов Ардуино\u003C\/a\u003E\u003Cbr \/\u003E\u003Ca href=\"https:\/\/tsibrov.blogspot.com\/2018\/09\/usbasp.html#%D0%A7%D1%82%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%B8%20%D0%B7%D0%B0%D0%BF%D0%B8%D1%81%D1%8C%20FLASH%20%D0%B8%20EEPROM%20%D0%BF%D0%B0%D0%BC%D1%8F%D1%82%D0%B8%20%D0%90%D1%80%D0%B4%D1%83%D0%B8%D0%BD%D0%BE\"\u003EЧтение и запись FLASH и EEPROM памяти Ардуино\u003C\/a\u003E\u003Cbr \/\u003E\u003Ca href=\"https:\/\/tsibrov.blogspot.com\/2018\/09\/usbasp.html#%D0%97%D0%B0%D0%BF%D0%B8%D1%81%D1%8C%20%D0%B7%D0%B0%D0%B3%D1%80%D1%83%D0%B7%D1%87%D0%B8%D0%BA%D0%B0%20%D0%B2%20%D0%90%D1%80%D0%B4%D1%83%D0%B8%D0%BD%D0%BE\"\u003EЗапись загрузчика в Ардуино\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ca href=\"http:\/\/www.blogger.com\/blogger.g?blogID=794788004739538112\" name=\"Подключение программатора USBasp к Ардуино\"\u003E\u003C\/a\u003E \u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003EПодключение программатора USBasp к Ардуино\u003C\/h2\u003E\u003C\/div\u003EUSBasp позволяет программировать AVR микроконтроллеры через последовательный интерфейс SPI. Для этого он имеет 10-пиновый разъем SPI. И подключение программатора к Ардуино или отдельному микроконтроллеру сводится к соединению их линий SPI и Reset.\u003Cbr \/\u003E\u003Cbr \/\u003EВ большинство плат Ардуино присутствует ICSP разъем, в котором сгруппированы выводы для внутрисхемного программирования: MOSI, MISO, SCK, RST, GND и VCC. Поэтому удобнее всего подключать программатор именно к ICSP. Здесь вам потребуется распиновка разъемов, она приведена ниже:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-fq_FTyFN6Dg\/W5jqUzAYDvI\/AAAAAAAAAgQ\/-Ei8XCUyt40fkGW230I4wn0otQxmYj07wCK4BGAYYCw\/s1600\/USBasp%2BISP6%2Bpinout.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em; text-align: center;\"\u003E\u003Cimg alt=\"Распиновка разъемов USBasp (10pin) и ISP 6pin\" border=\"0\" height=\"200\" src=\"https:\/\/2.bp.blogspot.com\/-fq_FTyFN6Dg\/W5jqUzAYDvI\/AAAAAAAAAgQ\/-Ei8XCUyt40fkGW230I4wn0otQxmYj07wCK4BGAYYCw\/s320\/USBasp%2BISP6%2Bpinout.png\" title=\"\" width=\"320\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003C\/div\u003E\u003Cbr \/\u003EСоедините соответствующие выводы программатора и Ардуино, должно получиться примерно так:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/4.bp.blogspot.com\/-9wcviFfhOXQ\/W5kngJ9gFiI\/AAAAAAAAAgc\/KJSTFWbKULA9d4XOaW29d9XB7fHOhLm2gCK4BGAYYCw\/s1600\/USBasp%2Bwired.jpg\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg alt=\"Подключение Arduino к USBasp\" border=\"0\" height=\"394\" src=\"https:\/\/4.bp.blogspot.com\/-9wcviFfhOXQ\/W5kngJ9gFiI\/AAAAAAAAAgc\/KJSTFWbKULA9d4XOaW29d9XB7fHOhLm2gCK4BGAYYCw\/s640\/USBasp%2Bwired.jpg\" title=\"\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EКонечно, возиться каждый раз с проводами не очень удобно, поэтому советую приобрести переходник ISP 10 pin to 6 pin. С ним всё становится гораздо проще.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-wBHskaYaS94\/W5bFY6DFpbI\/AAAAAAAAAf4\/Xdllvd2WESoOlS_whBd_scJVdKREHrZfACK4BGAYYCw\/s1600\/ISP10pin_to_6pin.jpg\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em; text-align: center;\"\u003E\u003Cimg alt=\"Переходник ISP 10-pin to 6-pin\" border=\"0\" height=\"168\" src=\"https:\/\/1.bp.blogspot.com\/-wBHskaYaS94\/W5bFY6DFpbI\/AAAAAAAAAf4\/Xdllvd2WESoOlS_whBd_scJVdKREHrZfACK4BGAYYCw\/s200\/ISP10pin_to_6pin.jpg\" title=\"\" width=\"200\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EЕсли же на плате Ардуино нет ICSP разъема, то остается подключать программатор к цифровым выводам в соответствии со следующей таблицей. В ней приведено расположение выводов MOSI, MISO и SCK для различных плат Ардуино.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv\u003E\u003Ctable align=\"center\" style=\"height: 213px; width: 651px;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Cth style=\"width: 202px;\"\u003EПлата Ардуино\u003C\/th\u003E\u003Cth style=\"width: 108px;\"\u003EMOSI\u003C\/th\u003E\u003Cth style=\"width: 109px;\"\u003EMISO\u003C\/th\u003E\u003Cth style=\"width: 109px;\"\u003ESCK\u003C\/th\u003E\u003Cth style=\"text-align: right; width: 89px;\"\u003EУровень\u003C\/th\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"width: 202px;\"\u003EUno, Duemilanove\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003E11 или ICSP-4\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 109px;\"\u003E12 или ICSP-1\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 109px;\"\u003E13 или ICSP-3\u003C\/td\u003E\u003Ctd style=\"text-align: right; width: 89px;\"\u003E5В\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"width: 202px;\"\u003ENano\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003E11 или ICSP-4\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 109px;\"\u003E12 или ICSP-1\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 109px;\"\u003E13 или ICSP-3\u003C\/td\u003E\u003Ctd style=\"text-align: right; width: 89px;\"\u003E5В\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"width: 202px;\"\u003EPro Mini\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003E11\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 109px;\"\u003E12\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 109px;\"\u003E13\u003C\/td\u003E\u003Ctd style=\"text-align: right; width: 89px;\"\u003E3.3В или 5В\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"width: 202px;\"\u003EMega1280, Mega2560\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003E51 или ICSP-4\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 109px;\"\u003E50 или ICSP-1\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 109px;\"\u003E52 или ICSP-3\u003C\/td\u003E\u003Ctd style=\"text-align: right; width: 89px;\"\u003E5В\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"width: 202px;\"\u003ELeonardo\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003EICSP-4\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 109px;\"\u003EICSP-1\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 109px;\"\u003EICSP-3\u0026nbsp;\u003C\/td\u003E\u003Ctd style=\"text-align: right; width: 89px;\"\u003E5В\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"width: 202px;\"\u003EDue\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003EICSP-4\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 109px;\"\u003EICSP-1\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 109px;\"\u003EICSP-3\u0026nbsp;\u003C\/td\u003E\u003Ctd style=\"text-align: right; width: 89px;\"\u003E3.3В\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"width: 202px;\"\u003EZero\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003EICSP-4\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 109px;\"\u003EICSP-1\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 109px;\"\u003EICSP-3\u003C\/td\u003E\u003Ctd style=\"text-align: right; width: 89px;\"\u003E3.3В\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"width: 202px;\"\u003E101\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003E11 или ICSP-4\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 109px;\"\u003E12 или ICSP-1\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 109px;\"\u003E13 или ICSP-3\u003C\/td\u003E\u003Ctd style=\"text-align: right; width: 89px;\"\u003E3.3В\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003C\/div\u003E\u003Cbr \/\u003EНе забывайте о том, что некоторые платы требуют питания 3.3В и для них нужно менять положение джампера JP1 на программаторе.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ca href=\"http:\/\/www.blogger.com\/blogger.g?blogID=794788004739538112\" name=\"Драйвера для USBasp\"\u003E\u003C\/a\u003E \u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003EДрайвера для USBasp\u003C\/h2\u003EДля работы с USBasp в Windows следует установить драйвера. Разработчик данного программатора рекомендует использовать драйвера\u0026nbsp;Zadig, скачать их можно на странице \u003Ca href=\"http:\/\/zadig.akeo.ie\/\" target=\"_blank\"\u003Ehttp:\/\/zadig.akeo.ie\/\u003C\/a\u003E. Обратите внимание, начиная с версии драйвера 2.3 прекращена поддержка Windows XP и Vista. Для указанных систем используйте предыдущую версию драйвера:\u0026nbsp;\u003Ca href=\"http:\/\/zadig.akeo.ie\/downloads\/zadig_xp_2.2.exe\"\u003Ezadig_xp_2.2.exe\u003C\/a\u003E\u0026nbsp;для XP и\u0026nbsp;\u003Ca href=\"http:\/\/zadig.akeo.ie\/downloads\/zadig_2.2.exe\"\u003Ezadig_2.2.exe\u003C\/a\u003E для Vista.\u003Cbr \/\u003E\u003Cbr \/\u003EУ меня в системе установлены драйвера из \u003Ca href=\"http:\/\/clc.la\/usbasp-win-driver\" target=\"_blank\"\u003Eэтого\u003C\/a\u003E набора, они подходят как для XP, так и для свежих версий Windows. Скачайте архив, распакуйте его и запустите\u0026nbsp;InstallDriver.exe для установки драйверов.\u003Cbr \/\u003E\u003Cbr \/\u003EПосле установки драйверов программатор будет виден в диспетчере устройств как USBasp, теперь мы можем его использовать:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-TW9R_n2klJ0\/W5laNHPHwXI\/AAAAAAAAAgo\/5dLHP_WK38AIzma5zBDQ8iVenATawf2QwCK4BGAYYCw\/s1600\/USBasp%2B%25D0%2594%25D0%25B8%25D1%2581%25D0%25BF%25D0%25B5%25D1%2582%25D1%2587%25D0%25B5%25D1%2580%2B%25D1%2583%25D1%2581%25D1%2582%25D1%2580%25D0%25BE%25D0%25B9%25D1%2581%25D1%2582%25D0%25B2.png\" imageanchor=\"1\"\u003E\u003Cimg border=\"0\" height=\"200\" src=\"https:\/\/3.bp.blogspot.com\/-TW9R_n2klJ0\/W5laNHPHwXI\/AAAAAAAAAgo\/5dLHP_WK38AIzma5zBDQ8iVenATawf2QwCK4BGAYYCw\/s640\/USBasp%2B%25D0%2594%25D0%25B8%25D1%2581%25D0%25BF%25D0%25B5%25D1%2582%25D1%2587%25D0%25B5%25D1%2580%2B%25D1%2583%25D1%2581%25D1%2582%25D1%2580%25D0%25BE%25D0%25B9%25D1%2581%25D1%2582%25D0%25B2.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003EПри работе в\u0026nbsp;Linux или MacOS X установка дополнительного ПО для USBasp не требуется.\u003Cbr \/\u003E\u003Cbr \/\u003EИтак, проверим программатор USBasp в действии. В предыдущих публикациях я описывал процедуру \u003Ca href=\"https:\/\/tsibrov.blogspot.com\/2018\/07\/arduino-as-isp.html\" target=\"_blank\"\u003Eзаписи загрузчика в Ардуино\u003C\/a\u003E и работу с \u003Ca href=\"https:\/\/tsibrov.blogspot.com\/2018\/08\/fuse-bits.html\" target=\"_blank\"\u003Eфьюзами\u003C\/a\u003E с использованием Ардуино в качестве программатора. Эти же действия можно выполнить, используя USBasp.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ca href=\"http:\/\/www.blogger.com\/blogger.g?blogID=794788004739538112\" name=\"Чтение и запись фьюзов Ардуино\"\u003E\u003C\/a\u003E \u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003EЧтение и запись фьюзов Ардуино\u003C\/h2\u003EДля работы с фьюзами будем использовать уже знакомый нам Avrdude. Поэтому запускаем командную строку, переходим в каталог avrdude и вводим команду для чтения младшего конфигурационного байта:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cb\u003Eavrdude\u0026nbsp;-C ..\/etc\/avrdude.conf\u0026nbsp;-c usbasp -p m328p -U lfuse:r:-:h\u003C\/b\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EВ этой команде использованы следующие параметры:\u003Cbr \/\u003E\u003Cul style=\"text-align: left;\"\u003E\u003Cli\u003E-c \u0026lt;programmer\u0026gt; - псевдоним используемого программатора, в данном случае usbasp.\u003C\/li\u003E\u003Cli\u003E-p \u0026lt;partno\u0026gt; - тип микроконтроллера. Я считываю фьюзы из Ардуино Уно, в которой установлен микроконтроллер ATmega328p, поэтому в качестве \u0026lt;partno\u0026gt; указано значение\u0026nbsp;m328p.\u003C\/li\u003E\u003Cli\u003E-U \u0026lt;memtype\u0026gt;:r|w|v:\u0026lt;filename\u0026gt;[:format] - комплексная опция для указания производимой с памятью операции (чтение. запись, проверка). -U lfuse:r:-:h означает, что требуется прочитать содержимое младшего байта конфигурации и вывести\u0026nbsp;считанное значение\u0026nbsp;на экран в щестнадцатеричном виде.\u003C\/li\u003E\u003C\/ul\u003E\u003Cdiv\u003EА вот и результат выполнения приведенной команды:\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-yCuujoIvLAw\/W5o9b6s15AI\/AAAAAAAAAhM\/0K2cxzFqF5sOdAjK6XLDwfHgZWcMrrCxwCK4BGAYYCw\/s1600\/USBasp%2BReading%2Bfuses.png\" imageanchor=\"1\"\u003E\u003Cimg alt=\"Результат чтения младшего конфигурационного байта Ардуино с использованием USBasp\" border=\"0\" height=\"340\" src=\"https:\/\/1.bp.blogspot.com\/-yCuujoIvLAw\/W5o9b6s15AI\/AAAAAAAAAhM\/0K2cxzFqF5sOdAjK6XLDwfHgZWcMrrCxwCK4BGAYYCw\/s640\/USBasp%2BReading%2Bfuses.png\" title=\"\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EЕсли у вас в результате присутствует строка\u0026nbsp;\u003Ci\u003Eavrdude: warning: cannot set sck period, please check for usbasp\u0026nbsp; firmware update\u003C\/i\u003E, то не обращайте на нее внимание. Это всего лишь предупреждение, не ошибка, работе оно не мешает. Если вы всё же хотите от него избавиться, то нужно обновить прошивку USBasp, данная процедура подробно расписана в статье \u003Ca href=\"https:\/\/tsibrov.blogspot.com\/2018\/10\/usbasp-firmware-update.html\" target=\"_blank\"\u003EПрошивка USBasp\u003C\/a\u003E. Как видно из скриншота, значение младшего конфигурационного байта равно 0xff, команда отработала успешно.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EТеперь проверим запись фьюзов с использованием USBasp. Я изменю значение дополнительного конфигурационного байта с 0xFF на 0xFD, что приведет к установке порога срабатывания схемы BOD в 2.7В. Команда для Avrdude и результат ее выполнения приведены ниже:\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003Eavrdude\u0026nbsp;-C ..\/etc\/avrdude.conf\u0026nbsp;-c usbasp -p m328p -U efuse:w:0xFD:m\u003C\/b\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-ACX8Mt7HDC4\/W5o_Ip26P7I\/AAAAAAAAAhY\/xEqfCs9R1OALW56iWo3CmK0_2XfPkdBCwCK4BGAYYCw\/s1600\/USBasp%2BWriting%2Bfuses.png\" imageanchor=\"1\"\u003E\u003Cimg alt=\"Результат записи дополнительного конфигурационного байта Ардуино с использованием USBasp\" border=\"0\" height=\"340\" src=\"https:\/\/1.bp.blogspot.com\/-ACX8Mt7HDC4\/W5o_Ip26P7I\/AAAAAAAAAhY\/xEqfCs9R1OALW56iWo3CmK0_2XfPkdBCwCK4BGAYYCw\/s640\/USBasp%2BWriting%2Bfuses.png\" title=\"\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003Ca href=\"http:\/\/www.blogger.com\/blogger.g?blogID=794788004739538112\" name=\"Чтение и запись FLASH и EEPROM памяти Ардуино\"\u003E\u003C\/a\u003E \u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003EЧтение и запись FLASH и EEPROM памяти Ардуино\u003C\/h2\u003EВ приведенных выше примерах команд для Avrdude в качестве параметра \u0026lt;memtype\u0026gt; использовались значения lfuse и efuse для доступа к конфигурационным байтам микроконтроллера. Данный параметр может принимать и другие значения, они приведены ниже:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cul style=\"text-align: left;\"\u003E\u003Cli\u003Ecalibration - байты калибровки RC-генератора;\u003C\/li\u003E\u003Cli\u003Eeeprom - энергонезависимая память микроконтроллера;\u003C\/li\u003E\u003Cli\u003Eefuse - дополнительный конфигурационный бит;\u003C\/li\u003E\u003Cli\u003Eflash - FLASH память микроконтроллера;\u003C\/li\u003E\u003Cli\u003Efuse - фьюз-байт для микроконтроллеров с одним fuse-байтом;\u003C\/li\u003E\u003Cli\u003Ehfuse - старший fuse-байт;\u003C\/li\u003E\u003Cli\u003Elfuse - младший fuse-байт;\u003C\/li\u003E\u003Cli\u003Elock - байт блокировки (ячейка защиты);\u003C\/li\u003E\u003Cli\u003Esignature - три байта что обозначают сигнатуру чипа (device ID);\u003C\/li\u003E\u003Cli\u003EfuseN - байт с фьюзами для ATxmega чипов, N - целое число для каждого фьюза что поддерживается устройством;\u003C\/li\u003E\u003Cli\u003Eapplication - область приложений во Flash памяти для МК ATxmega;\u003C\/li\u003E\u003Cli\u003Eapptable - таблица приложений в области Flash памяти для устройств ATxmega;\u003C\/li\u003E\u003Cli\u003Eboot - загрузочная область Flash памяти для устройств ATxmega;\u003C\/li\u003E\u003Cli\u003Eprodsig - область с производственной сигнатурой (calibration) для устройств ATxmega;\u003C\/li\u003E\u003Cli\u003Eusersig - область с пользовательской сигнатурой для устройств ATxmega.\u003C\/li\u003E\u003C\/ul\u003E\u003Cbr \/\u003EТаким образом, для чтения FLASH Ардуино Уно (микроконтроллера ATmega328p) может быть использована следующая команда:\u003Cbr \/\u003E\u003Cb\u003Eavrdude\u0026nbsp;-C ..\/etc\/avrdude.conf\u0026nbsp;-p m328p -c usbasp -U flash:r:flash_dump.hex:i\u003C\/b\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EФайл с содержимым FLASH памяти микроконтроллера будет создан в каталоге Avrdude. Либо можно прописать в команде полный путь к файлу.\u003Cbr \/\u003E\u003Cbr \/\u003EДля записи в FLASH память содержимого файла flash_dump.hex можно использовать команду:\u003Cbr \/\u003E\u003Cb\u003Eavrdude\u0026nbsp;-C ..\/etc\/avrdude.conf\u0026nbsp;-p m328p -c usbasp -U flash:w:flash_dump.hex:i\u003C\/b\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EЧтение EEPROM:\u003Cbr \/\u003E\u003Cb\u003Eavrdude\u0026nbsp;-C ..\/etc\/avrdude.conf\u0026nbsp;-p m328p -c usbasp -U eeprom:r:eeprom_dump.hex:i\u003C\/b\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EЗапись EEPROM:\u003Cbr \/\u003E\u003Cb\u003Eavrdude\u0026nbsp;-C ..\/etc\/avrdude.conf\u003C\/b\u003E\u003Cb\u003E\u0026nbsp;-p m328p -c usbasp -U eeprom:w:eeprom_dump.hex:i\u003C\/b\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ca href=\"http:\/\/www.blogger.com\/blogger.g?blogID=794788004739538112\" name=\"Запись загрузчика в Ардуино\"\u003E\u003C\/a\u003E \u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003EЗапись загрузчика в Ардуино\u003C\/h2\u003E\u003C\/div\u003E\u003Cdiv\u003EПроцедуру записи загрузчика я описывал ранее в публикации\u0026nbsp;\u003Ca href=\"https:\/\/tsibrov.blogspot.com\/2018\/07\/arduino-as-isp.html\" target=\"_blank\"\u003EArduino as ISP - программатор из Ардуино\u003C\/a\u003E. Как и в прошлый раз для записи загрузчика мы будем использовать IDE Arduino. Последовательность шагов следующая:\u003C\/div\u003E\u003Cdiv\u003E\u003Col style=\"text-align: left;\"\u003E\u003Cli\u003EСоединяем USBasp с платой, в которую будем записывать загрузчик и подключаем программатор к компьютеру.\u003C\/li\u003E\u003Cli\u003EЗапускаем IDE Arduino.\u003C\/li\u003E\u003Cli\u003EВ меню \u003Ci\u003EИнструменты \u0026gt; Программатор\u003C\/i\u003E выбираем USBasp.\u003C\/li\u003E\u003Cli\u003EВ меню \u003Ci\u003EИнструменты \u0026gt; Плата\u003C\/i\u003E выбираем значение, соответствующее нашей плате.\u003C\/li\u003E\u003Cli\u003EВ меню \u003Ci\u003EИнструменты\u003C\/i\u003E выбираем команду \u003Ci\u003EЗаписать загрузчик.\u003C\/i\u003E\u003C\/li\u003E\u003C\/ol\u003E\u003Cdiv\u003EЕсли все сделано правильно, то в нижней части IDE появится сообщение об успешной записи загрузчика:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-B62Gaw_-wyo\/W5qk4W3UswI\/AAAAAAAAAhk\/VlQiFfx6XvENAmsIbgdOsRhDPmuCQNaJwCK4BGAYYCw\/s1600\/Bootloader%2Bflashing%2Bdone.png\" imageanchor=\"1\"\u003E\u003Cimg border=\"0\" src=\"https:\/\/2.bp.blogspot.com\/-B62Gaw_-wyo\/W5qk4W3UswI\/AAAAAAAAAhk\/VlQiFfx6XvENAmsIbgdOsRhDPmuCQNaJwCK4BGAYYCw\/s1600\/Bootloader%2Bflashing%2Bdone.png\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"https:\/\/tsibrov.blogspot.com\/feeds\/7936050979708386804\/comments\/default","title":"Комментарии к сообщению"},{"rel":"replies","type":"text/html","href":"https:\/\/tsibrov.blogspot.com\/2018\/09\/usbasp.html#comment-form","title":"Комментарии: 0"},{"rel":"edit","type":"application/atom+xml","href":"https:\/\/www.blogger.com\/feeds\/794788004739538112\/posts\/default\/7936050979708386804"},{"rel":"self","type":"application/atom+xml","href":"https:\/\/www.blogger.com\/feeds\/794788004739538112\/posts\/default\/7936050979708386804"},{"rel":"alternate","type":"text/html","href":"https:\/\/tsibrov.blogspot.com\/2018\/09\/usbasp.html","title":"Программатор USBasp"}],"author":[{"name":{"$t":"Владимир"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/07943437233560370294"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"16","height":"16","src":"https:\/\/img1.blogblog.com\/img\/b16-rounded.gif"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"https:\/\/3.bp.blogspot.com\/-T-1L_bniogI\/W5bD2um4r-I\/AAAAAAAAAfg\/nVIjf7506DknMb9eyvXGvuokSo5zeX-6ACK4BGAYYCw\/s72-c\/AC-PG-USBASP.jpg","height":"72","width":"72"},"thr$total":{"$t":"0"}},{"id":{"$t":"tag:blogger.com,1999:blog-794788004739538112.post-3658531361444533218"},"published":{"$t":"2018-08-19T15:13:00.001+03:00"},"updated":{"$t":"2019-02-07T20:35:11.392+03:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"spi"},{"scheme":"http://www.blogger.com/atom/ns#","term":"ардуино"},{"scheme":"http://www.blogger.com/atom/ns#","term":"программатор"}],"title":{"type":"text","$t":"Что такое Фьюзы. Чтение и запись фьюзов Ардуино"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003EСегодня я хочу рассказать о том, что такое фьюзы, за что они отвечают и как их можно прочитать и записать в Ардуино. Рекомендую также заглянуть в \u003Ca href=\"https:\/\/tsibrov.blogspot.com\/2018\/07\/arduino-as-isp.html\" target=\"_blank\"\u003Eпредыдущую публикацию\u003C\/a\u003E, т.к. работа с фьюзами возможна только через программатор.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ca name='more'\u003E\u003C\/a\u003E\u003Cbr \/\u003EФьюзы (от английского Fuse bits) - это конфигурационные биты микроконтроллера, отвечающие за его предварительную настройку. Эти биты расположены в отдельном адресном пространстве, доступном только при программировании. Биты объединяются в конфигурационные байты и их состав зависит от конкретной модели микроконтроллера.\u003Cbr \/\u003E\u003Cbr \/\u003EПри работе с конфигурационными битами нужно помнить один важный момент: \u003Cb\u003Eесли бит содержит логическую единицу, то это означает что он не запрограммирован, соответственно, запрограммированный конфигурационный бит содержит логический ноль\u003C\/b\u003E. Такая логика была заложена фирмой Atmel и основана на принципе хранения данных в EEPROM: чистая микросхема памяти содержит во всех ячейках единицы, а термин запрограммирована по отношению к такой ячейке означает, что в нее записали ноль.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003EФьюзы ATmega328 \/ ATmega328p\u003C\/h2\u003EМикроконтроллеры ATmega328 и ATmega328p, на базе которых построено большинство плат семейства Ардуино, имеют 3 байта конфигурации: младший, старший и дополнительный. Их описание приведено ниже в таблицах.\u003Cbr \/\u003E\u003Cbr \/\u003EМладший конфигурационный байт ATmega328\/P\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ctable align=\"center\" style=\"height: 213px;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Cth style=\"text-align: left; width: 50px;\"\u003EНомер бита\u003C\/th\u003E\u003Cth style=\"text-align: left; width: 115px;\"\u003EНавание\u003C\/th\u003E\u003Cth style=\"text-align: left; width: 230px;\"\u003EОписание\u003C\/th\u003E\u003Cth style=\"text-align: left; width: 180px;\"\u003EЗначение по умолчанию\u003C\/th\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: left; width: 50px;\"\u003E7\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 115px;\"\u003ECKDIV8\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 230px;\"\u003EDivide clock by 8\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 180px;\"\u003E0 (запрограммирован)\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: left; width: 50px;\"\u003E6\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 115px;\"\u003ECKOUT\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 230px;\"\u003EClock output\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 180px;\"\u003E1 (не запрограммирован)\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: left; width: 50px;\"\u003E5\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 115px;\"\u003ESUT1\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 230px;\"\u003ESelect start-up time\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 180px;\"\u003E1 (не запрограммирован)\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: left; width: 50px;\"\u003E4\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 115px;\"\u003ESUT0\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 230px;\"\u003ESelect start-up time\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 180px;\"\u003E0 (запрограммирован)\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: left; width: 50px;\"\u003E3\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 115px;\"\u003ECKSEL3\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 230px;\"\u003ESelect Clock source\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 180px;\"\u003E0 (запрограммирован)\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: left; width: 50px;\"\u003E2\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 115px;\"\u003ECKSEL2\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 230px;\"\u003ESelect Clock source\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 180px;\"\u003E0 (запрограммирован)\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: left; width: 50px;\"\u003E1\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 115px;\"\u003ECKSEL1\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 230px;\"\u003ESelect Clock source\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 180px;\"\u003E1 (не запрограммирован)\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: left; width: 50px;\"\u003E0\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 115px;\"\u003ECKSEL0\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 230px;\"\u003ESelect Clock source\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 180px;\"\u003E0 (запрограммирован)\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EСтарший конфигурационный байт ATmega328\/P\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ctable align=\"center\" style=\"height: 213px;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Cth style=\"text-align: left; width: 50px;\"\u003EНомер бита\u003C\/th\u003E\u003Cth style=\"text-align: left; width: 115px;\"\u003EНавание\u003C\/th\u003E\u003Cth style=\"text-align: left; width: 230px;\"\u003EОписание\u003C\/th\u003E\u003Cth style=\"text-align: left; width: 180px;\"\u003EЗначение по умолчанию\u003C\/th\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: left; width: 50px;\"\u003E7\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 115px;\"\u003ERSTDISBL\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 230px;\"\u003EExternal Reset Disable\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 180px;\"\u003E1 (не запрограммирован)\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: left; width: 50px;\"\u003E6\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 115px;\"\u003EDWEN\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 230px;\"\u003EdebugWIRE Enable\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 180px;\"\u003E1 (не запрограммирован)\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: left; width: 50px;\"\u003E5\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 115px;\"\u003ESPIEN\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 230px;\"\u003EEnable Serial Program and Data Downloading\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 180px;\"\u003E0 (запрограммирован)\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: left; width: 50px;\"\u003E4\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 115px;\"\u003EWDTON\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 230px;\"\u003EWatchdog Timer Always On\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 180px;\"\u003E1 (не запрограммирован)\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: left; width: 50px;\"\u003E3\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 115px;\"\u003EEESAVE\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 230px;\"\u003EEEPROM memory is preserved through the Chip Erase\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 180px;\"\u003E1 (не запрограммирован)\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: left; width: 50px;\"\u003E2\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 115px;\"\u003EBOOTSZ1\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 230px;\"\u003ESelect Boot Size\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 180px;\"\u003E0 (запрограммирован)\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: left; width: 50px;\"\u003E1\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 115px;\"\u003EBOOTSZ0\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 230px;\"\u003ESelect Boot Size\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 180px;\"\u003E0 (запрограммирован)\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: left; width: 50px;\"\u003E0\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 115px;\"\u003EBOOTRST\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 230px;\"\u003ESelect Reset Vector\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 180px;\"\u003E0 (запрограммирован)\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EДополнительный конфигурационный байт ATmega328\/P\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ctable align=\"center\" style=\"height: 213px;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Cth style=\"text-align: left; width: 50px;\"\u003EНомер бита\u003C\/th\u003E\u003Cth style=\"text-align: left; width: 115px;\"\u003EНавание\u003C\/th\u003E\u003Cth style=\"text-align: left; width: 230px;\"\u003EОписание\u003C\/th\u003E\u003Cth style=\"text-align: left; width: 180px;\"\u003EЗначение по умолчанию\u003C\/th\u003E\u003C\/tr\u003E\u003Ctr style=\"text-align: left;\"\u003E\u003Ctd style=\"width: 50px;\"\u003E7\u003C\/td\u003E\u003Ctd style=\"width: 115px;\"\u003E-\u003C\/td\u003E\u003Ctd style=\"width: 230px;\"\u003E-\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 180px;\"\u003E1\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr style=\"text-align: left;\"\u003E\u003Ctd style=\"width: 50px;\"\u003E6\u003C\/td\u003E\u003Ctd style=\"width: 115px;\"\u003E-\u003C\/td\u003E\u003Ctd style=\"width: 230px;\"\u003E-\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 180px;\"\u003E1\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr style=\"text-align: left;\"\u003E\u003Ctd style=\"width: 50px;\"\u003E5\u003C\/td\u003E\u003Ctd style=\"width: 115px;\"\u003E-\u003C\/td\u003E\u003Ctd style=\"width: 230px;\"\u003E-\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 180px;\"\u003E1\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr style=\"text-align: left;\"\u003E\u003Ctd style=\"width: 50px;\"\u003E4\u003C\/td\u003E\u003Ctd style=\"width: 115px;\"\u003E-\u003C\/td\u003E\u003Ctd style=\"width: 230px;\"\u003E-\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 180px;\"\u003E1\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr style=\"text-align: left;\"\u003E\u003Ctd style=\"width: 50px;\"\u003E3\u003C\/td\u003E\u003Ctd style=\"width: 115px;\"\u003E-\u003C\/td\u003E\u003Ctd style=\"width: 230px;\"\u003E-\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 180px;\"\u003E1\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr style=\"text-align: left;\"\u003E\u003Ctd style=\"width: 50px;\"\u003E2\u003C\/td\u003E\u003Ctd style=\"width: 115px;\"\u003EBODLEVEL2\u003C\/td\u003E\u003Ctd style=\"width: 230px;\"\u003EBrown-out Detector trigger level\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 180px;\"\u003E1 (не запрограммирован)\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr style=\"text-align: left;\"\u003E\u003Ctd style=\"width: 50px;\"\u003E1\u003C\/td\u003E\u003Ctd style=\"width: 115px;\"\u003EBODLEVEL1\u003C\/td\u003E\u003Ctd style=\"width: 230px;\"\u003EBrown-out Detector trigger level\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 180px;\"\u003E1 (не запрограммирован)\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"width: 50px;\"\u003E0\u003C\/td\u003E\u003Ctd style=\"width: 115px;\"\u003EBODLEVEL0\u003C\/td\u003E\u003Ctd style=\"width: 230px;\"\u003EBrown-out Detector trigger level\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 180px;\"\u003E1 (не запрограммирован)\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EТаким образом, значения конфигурационных байтов в ATmega328\/P по умолчанию: Low: 0x62, High: 0xD9, Extended: 0xFF. Обратите внимание, это значения именно для \"чистого\" микроконтроллера ATmega328\/P , а не для Ардуино. Значения фьюзов для Ардуино можно найти в файле\u0026nbsp;\u003Ci\u003EArduino_dir\\hardware\\arduino\\avr\\Boards.txt\u003C\/i\u003E, где\u0026nbsp;\u003Ci\u003EArduino_dir\u003C\/i\u003E - это путь к IDE Arduino. Откройте файл в текстовом редакторе и найдите интересующую плату по названию, чуть ниже будет информация о фьюзах:\u003Cbr \/\u003E\u003Cbr \/\u003Euno.name=Arduino\/Genuino Uno\u003Cbr \/\u003E...\u003Cbr \/\u003Euno.bootloader.low_fuses=0xFF\u003Cbr \/\u003Euno.bootloader.high_fuses=0xDE\u003Cbr \/\u003Euno.bootloader.extended_fuses=0x05\u003Cbr \/\u003E\u003Cbr \/\u003EДля расшифровки шестнадцатеричных значений конфигурационных байтов удобно использовать онлайн калькулятор\u0026nbsp;\u003Ca href=\"http:\/\/www.engbedded.com\/fusecalc\/\" target=\"_blank\"\u003EEngbedded Atmel AVR® Fuse Calculator\u003C\/a\u003E:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-ZDJ_hUDk10w\/W3EzbILZDOI\/AAAAAAAAAeU\/5U16wDMeiEYbcBYswC7oIgT2_MMDEs_VgCK4BGAYYCw\/s1600\/Online%2Bfuse%2Bcalculator.png\" imageanchor=\"1\"\u003E\u003Cimg alt=\"Engbedded Atmel AVR® Fuse Calculator\" border=\"0\" height=\"400\" src=\"https:\/\/1.bp.blogspot.com\/-ZDJ_hUDk10w\/W3EzbILZDOI\/AAAAAAAAAeU\/5U16wDMeiEYbcBYswC7oIgT2_MMDEs_VgCK4BGAYYCw\/s640\/Online%2Bfuse%2Bcalculator.png\" title=\"\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003EВыберите модель микроконтроллера и введите значения фьюзов в соответствующие поля внизу страницы в разделе Current settings - введенные значения будут моментально расшифрованы и представлены в удобном виде. И, наоборот, можно изменить конфигурацию битов в разделах\u0026nbsp;Manual fuse bits configuration и\u0026nbsp;Feature configuration и получить значения конфигурационных байтов для записи в микроконтроллер.\u003Cbr \/\u003E\u003Cbr \/\u003EРассмотрим назначение конфигурационных битов более подробно.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch4 style=\"text-align: left;\"\u003ECKDIV8\u003C\/h4\u003E\u003Cdiv\u003EДанный бит отвечает за деление тактовой частоты на 8. Он определяет начальное значение регистра делителя частоты: если бит не запрограммирован, то регистр делителя будет сброшен в \"0000\"; если бит CKDIV8 запрограммирован, то в регистре будет установлено значение \"0011\", что обеспечит деление тактовой частоты на 8. Однако вне зависимости от значения фьюза CKDIV8 значение делителя может быть изменено программой в любой момент.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch4 style=\"text-align: left;\"\u003ECKOUT\u003C\/h4\u003E\u003Cdiv\u003EATmega328\/p позволяет выводить тактовую частоту на цифровой вывод CLKO (digital pin 8 на Ардуино Уно). Для этого конфигурационный бит CKOUT должен быть запрограммирован. Данная функция может быть полезна при использовании таковой частоты микроконтроллера внешними устройствами. При использовании делителя системной частоты на вывод CLKO также будет поступать пониженная частота.\u003C\/div\u003E\u003Cbr \/\u003E\u003Ch4 style=\"text-align: left;\"\u003ESUT\u003C\/h4\u003EКонфигурационные биты SUT совместно с битами CKSEL определяют длительность задержки при старте микроконтроллера. Задержка необходима для того, чтобы источник тактовой частоты стабилизировался после подачи питания и вошел в свой рабочий режим. Величина задержки зависит от выбранного источника и составляет от 0 до 65мс. Конкретные значения можно найти в даташите.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ca href=\"http:\/\/www.blogger.com\/blogger.g?blogID=794788004739538112\" name=\"CKSEL\"\u003E\u003C\/a\u003E \u003Cbr \/\u003E\u003Ch4 style=\"text-align: left;\"\u003ECKSEL\u003C\/h4\u003E\u003Cdiv\u003EСовременные микроконтроллеры способны работать с различными источниками тактового сигнала. Выбор источника осуществляется установкой конфигурационных битов CKSEL. В таблице ниже приведены источники тактового сигнала, поддерживаемые микроконтроллерами ATmega328 \/ ATmega328P, и соответствующие им значения CKSEL.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ctable align=\"center\" style=\"height: 213px; width: 442.933px;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Cth style=\"text-align: left; width: 343px;\"\u003EИсточник тактового сигнала\u003C\/th\u003E\u003Cth style=\"text-align: left; width: 90.9333px;\"\u003EЗначение CKSEL3..0\u003C\/th\u003E\u003C\/tr\u003E\u003Ctr style=\"text-align: left;\"\u003E\u003Ctd style=\"width: 343px;\"\u003EЭкономичный кварцевый генератор\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 90.9333px;\"\u003E1111-1000\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr style=\"text-align: left;\"\u003E\u003Ctd style=\"width: 343px;\"\u003EКварцевый генератор\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 90.9333px;\"\u003E0111-0110\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr style=\"text-align: left;\"\u003E\u003Ctd style=\"width: 343px;\"\u003EНизкочастотный кварцевый генератор\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 90.9333px;\"\u003E0101-0100\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr style=\"text-align: left;\"\u003E\u003Ctd style=\"width: 343px;\"\u003EВнутренний RC-генератор на 128кГц\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 90.9333px;\"\u003E0011\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr style=\"text-align: left;\"\u003E\u003Ctd style=\"width: 343px;\"\u003EВнутренний калиброванный RC-генератор\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 90.9333px;\"\u003E0010\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr style=\"text-align: left;\"\u003E\u003Ctd style=\"width: 343px;\"\u003EВнешний сигнал синхронизации\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 90.9333px;\"\u003E0000\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"width: 343px;\"\u003EЗарезервировано\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 90.9333px;\"\u003E0001\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003E\u003Ca href=\"http:\/\/www.blogger.com\/blogger.g?blogID=794788004739538112\" name=\"RSTDISBL\"\u003E\u003C\/a\u003E \u003Cbr \/\u003E\u003Ch4 style=\"text-align: left;\"\u003ERSTDISBL\u003C\/h4\u003EФьюз\u0026nbsp;RSTDISBL управляет работой цифрового вывода микроконтроллера, совмещенного с входом внешнего сброса. Если RSTDISBL запрограммирован,\u0026nbsp; то вывод может быть использован как обычный цифровой пин ввода\/вывода. Если фьюз RSTDISBL не запрограммирован, то вывод используется для внешнего сигнала сброса: низкий уровень напряжения на нем приводит к генерации сигнала сброса микроконтроллера. Отключение внешнего сброса может быть оправдано при работе с микроконтроллерами, имеющими небольшое количество выводов, в других случаях лучше не трогать этот фьюз.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch4 style=\"text-align: left;\"\u003EDWEN\u003C\/h4\u003E\u003C\/div\u003E\u003Cdiv\u003EБит DWEN разрешает\/запрещает работу отладочного интерфейса debugWire.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch4 style=\"text-align: left;\"\u003ESPIEN\u003C\/h4\u003E\u003Cdiv\u003EДанный бит разрешает\/запрещает программирование по интерфейсу SPI. По умолчанию он запрограммирован и лучше не менять значение данного фьюза, как и значение RSTDISBL.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch4 style=\"text-align: left;\"\u003EWDTON\u003C\/h4\u003E\u003Cdiv\u003EЕсли запрограммировать конфигурационный бит\u0026nbsp;WDTON, то сторожевой таймер начнет свою работу сразу после подачи питания на микроконтроллер. Работу таймера нельзя будет запретить программно и при его переполнении будет генерироваться сигнал сброса. Если данный фьюз не запрограммирован, то работой сторожевого таймера можно управлять программно, в том числе настроить его на генерацию прерывания, сигнала сброса или того и другого.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch4 style=\"text-align: left;\"\u003EEESAVE\u003C\/h4\u003E\u003Cdiv\u003EДанный бит определяет влияние команды \"Стирание кристалла\" на EEPROM-память: если бит запрограммирован, то при выполнении команды Chip Erase будут очищены Flash, SRAM и Lock-биты, а содержимое EEPROM затронуто не будет. В противном случае содержимое EEPROM также будет стерто.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch4 style=\"text-align: left;\"\u003EBOOTSZ\u003C\/h4\u003E\u003Cdiv\u003EКонфигурационные биты BOOTSZ определяют размер FLASH памяти микроконтроллера, резервируемой для загрузчика. Значения битов BOOTSZ и соответствующие им размеры указаны в таблице ниже. По умолчанию резервируется максимальный размер - 2048 слов.\u003C\/div\u003E\u003Cbr \/\u003E\u003Ctable align=\"center\" style=\"height: 213px; width: 445px;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Cth style=\"text-align: left; width: 271px;\"\u003EНачало секции загрузчика\u003C\/th\u003E\u003Cth style=\"text-align: left; width: 335.5px;\"\u003EРазмер секции (слов)\u003C\/th\u003E\u003Cth style=\"text-align: left; width: 187.5px;\"\u003EЗначение BOOTSZ1..0\u003C\/th\u003E\u003C\/tr\u003E\u003Ctr style=\"text-align: left;\"\u003E\u003Ctd style=\"width: 271px;\"\u003E0x3F00\u003C\/td\u003E\u003Ctd style=\"width: 335.5px;\"\u003E256\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 187.5px;\"\u003E11\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr style=\"text-align: left;\"\u003E\u003Ctd style=\"width: 271px;\"\u003E0x3E00\u003C\/td\u003E\u003Ctd style=\"width: 335.5px;\"\u003E512\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 187.5px;\"\u003E10\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr style=\"text-align: left;\"\u003E\u003Ctd style=\"width: 271px;\"\u003E0x3C00\u003C\/td\u003E\u003Ctd style=\"width: 335.5px;\"\u003E1024\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 187.5px;\"\u003E01\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr style=\"text-align: left;\"\u003E\u003Ctd style=\"width: 271px;\"\u003E0x3800\u003C\/td\u003E\u003Ctd style=\"width: 335.5px;\"\u003E2048\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 187.5px;\"\u003E00\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003E\u003Ch4 style=\"text-align: left;\"\u003EBOOTRST\u003C\/h4\u003E\u003Cdiv\u003EОпределяет положение вектора сброса. Если бит не запрограммирован, то вектор сброса располагается по адресу 0x0000, выполнение программы начнется именно с этого адреса. Если бит BOOTRST запрограммирован, то выполнение программы начнется с адреса начала секции загрузчика.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch4 style=\"text-align: left;\"\u003EBODLEVEL\u003C\/h4\u003E\u003Cdiv\u003EКонфигурационные биты\u0026nbsp;BODLEVEL определяют порог срабатывания схемы BOD (Brown-Out Detection), которая отслеживает уровень напряжения источника питания. Если работа схемы BOD разрешена, то при снижении напряжения питания ниже установленного порога она переводит микроконтроллер в состояние сброса. Когда напряжение питания вновь увеличивается до порогового значения (данный порог чуть выше предыдущего за счет наличия гистерезиса), сигнал сброса снимается и происходит запуск микроконтроллера. Комбинации битов BODLEVEL и соответствующие им пороговые значения приведены в таблице:\u003C\/div\u003E\u003Cbr \/\u003E\u003Ctable align=\"center\" style=\"height: 213px; width: 445px;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Cth style=\"text-align: left; width: 271px;\"\u003EПорог срабатывания схемы BOD (В)\u003C\/th\u003E\u003Cth style=\"text-align: left; width: 187.5px;\"\u003EЗначение BODLEVEL2..0\u003C\/th\u003E\u003C\/tr\u003E\u003Ctr style=\"text-align: left;\"\u003E\u003Ctd style=\"width: 271px;\"\u003EСхема BOD выключена\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 187.5px;\"\u003E111\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr style=\"text-align: left;\"\u003E\u003Ctd style=\"width: 271px;\"\u003EVcc = 1.8\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 187.5px;\"\u003E110\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr style=\"text-align: left;\"\u003E\u003Ctd style=\"width: 271px;\"\u003EVcc = 2.7\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 187.5px;\"\u003E101\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr style=\"text-align: left;\"\u003E\u003Ctd style=\"width: 271px;\"\u003EVcc = 4.3\u003C\/td\u003E\u003Ctd style=\"text-align: left; width: 187.5px;\"\u003E100\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003E\u003Cdiv\u003E\u003Cbr \/\u003EТеперь можно понять начальное состояние микроконтроллеров ATmega328\/P, в каком они поставляются с завода: микроконтроллер сконфигурирован на работу с внутренним RC генератором на 8МГц, при этом прошитый бит CKDIV8 обеспечивает деление частоты генератора на 8; внешний сброс (по низкому уровню на выводе Reset) не запрещен; разрешено программирование по интерфейсу SPI; для загрузчика отведена область памяти 2048 слов; стартовый адрес программы 0x0000; схема контроля питания отключена.\u003Cbr \/\u003E\u003Cbr \/\u003EВ Ардуино Уно фьюзы микроконтроллера изменены таким образом, чтобы он был настроен на работу с экономичным кварцевым генератором без делителя частоты; для загрузчика отводится 256 слов; прошитый бит BOOTRST назначает стартовым адресом адрес начала секции загрузчика; порог срабатывания схемы BOD составляет 2.7В.\u003Cbr \/\u003E\u003Cbr \/\u003EРазобравшись с назначением фьюзов можно перейти от теории к практике: попробуем прочитать и записать фьюзы Ардуино.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003EЧтение фьюзов Ардуино\u003C\/h2\u003EВ \u003Ca href=\"https:\/\/tsibrov.blogspot.com\/2018\/07\/arduino-as-isp.html\"\u003Eпредыдущей публикации\u003C\/a\u003E я рассказал о том, как превратить Ардуино в ISP программатор. И сейчас он нам пригодится для работы с фьюзами. Поэтому готовим программатор и подключаем к нему плату, из которой будем считывать фьюзы.\u003Cbr \/\u003E\u003Cbr \/\u003EВ среде разработки Ардуино нет инструментов для чтения\/записи фьюзов. Разве что процедура записи загрузчика включает в себя установку фьюзов, значения которых берутся из упомянутого ранее файла\u0026nbsp;Boards.txt. Но в состав IDE входит программа Avrdude, предназначенная для прошивки AVR микроконтроллеров, ей-то мы и воспользуемся. Avrdude - консольная программа, работать мы с ней будем через командную строку, поэтому запускаем проводник и переходим в папку с программой. У меня IDE Arduino расположена на диске D и путь к Avrdude выглядит следующим образом:\u0026nbsp;\u003Ci\u003ED:\\Arduino\\arduino-1.6.12\\hardware\\tools\\avr\\bin\u003C\/i\u003E.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/4.bp.blogspot.com\/-p1bnLmAGasg\/W2_iB6U3V3I\/AAAAAAAAAdk\/5Z35tVVEahoZHpnOTzacQwOr3AoQxFbvwCK4BGAYYCw\/s1600\/Arduino%2Bpath%2Bto%2Bavrdude.png\" imageanchor=\"1\"\u003E\u003Cimg border=\"0\" height=\"336\" src=\"https:\/\/4.bp.blogspot.com\/-p1bnLmAGasg\/W2_iB6U3V3I\/AAAAAAAAAdk\/5Z35tVVEahoZHpnOTzacQwOr3AoQxFbvwCK4BGAYYCw\/s640\/Arduino%2Bpath%2Bto%2Bavrdude.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003EНаходясь в этой папке нужно поместить курсор в адресную строку, удалить из нее путь, ввести cmd и нажать Enter. Откроется окно интерпретатора командной строки:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-GVMqg8qpTfE\/W3B_GDszNBI\/AAAAAAAAAd8\/uoJKgtzeLFc_Dhnv-xkKoE1J0Tvv91FGQCK4BGAYYCw\/s1600\/cmd%2Bwith%2Bavrdude%2Bpath.png\" imageanchor=\"1\"\u003E\u003Cimg border=\"0\" height=\"180\" src=\"https:\/\/2.bp.blogspot.com\/-GVMqg8qpTfE\/W3B_GDszNBI\/AAAAAAAAAd8\/uoJKgtzeLFc_Dhnv-xkKoE1J0Tvv91FGQCK4BGAYYCw\/s640\/cmd%2Bwith%2Bavrdude%2Bpath.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003EПосле этого подключаем программатор к компьютеру и вводим в командной строке следующую команду:\u003Cbr \/\u003E\u003Cbr \/\u003Eavrdude -c arduino -p m328p -P com26 -b 19200 -U lfuse:r:-:h\u003Cbr \/\u003E\u003Cbr \/\u003EПеред выполнением команды проверьте и скорректируйте ее параметры:\u003Cbr \/\u003E\u003Cul style=\"text-align: left;\"\u003E\u003Cli\u003E-c \u0026lt;programmer\u0026gt; - в качестве \u0026lt;programmer\u0026gt; указывает псевдоним используемого программатора, в нашем случае arduino.\u003C\/li\u003E\u003Cli\u003E-p \u0026lt;partno\u0026gt; - указывает тип микроконтроллера, m328p - это ATmega328p.\u003C\/li\u003E\u003Cli\u003E-P \u0026lt;port\u0026gt; - указывает используемый программатором порт.\u003C\/li\u003E\u003Cli\u003E-b\u0026nbsp;\u0026lt;baudrate\u0026gt; - позволяет переопределить указанную для программатора в конфигурации программы скорость подключения по интерфейсу RS-232.\u003C\/li\u003E\u003Cli\u003E-U \u0026lt;memtype\u0026gt;:r|w|v:\u0026lt;filename\u0026gt;[:format] - комплексная опция для указания производимой с памятью операции (чтение. запись, проверка). -U lfuse:r:-:h означает, что мы хотим прочитать содержимое младшего байта конфигурации, считанное значение выводим на экран в шестнадцатеричном виде.\u003C\/li\u003E\u003C\/ul\u003E\u003Cdiv\u003EБолее подробную информацию о параметрах запусках avrdude можно найти по ссылке\u0026nbsp;\u003Ca href=\"https:\/\/ph0en1x.net\/77-avrdude-full-howto-samples-options-gui-linux.html\" target=\"_blank\"\u003Ehttps:\/\/ph0en1x.net\/77-avrdude-full-howto-samples-options-gui-linux.html\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EНиже приведен мой результат выполнения данной команды:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-ilh9BphMacE\/W3HULeJ1kZI\/AAAAAAAAAes\/IVPq-GbiyIkRpwDOphrZYhP5AbFoGpZVgCK4BGAYYCw\/s1600\/avrdude%2Breading%2Bfuses.png\" imageanchor=\"1\"\u003E\u003Cimg alt=\"avrdude чтение фьюзов Ардуино\" border=\"0\" height=\"340\" src=\"https:\/\/2.bp.blogspot.com\/-ilh9BphMacE\/W3HULeJ1kZI\/AAAAAAAAAes\/IVPq-GbiyIkRpwDOphrZYhP5AbFoGpZVgCK4BGAYYCw\/s640\/avrdude%2Breading%2Bfuses.png\" title=\"\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003C\/div\u003EКак видно из скриншота, младший конфигурационный байт моей Arduino Uno содержит значение 0xFF. Кроме запрошенного значения avrdude показал также значения всех трех конфигурационных байт. Это произошло потому, что мы не отключили safemode, это можно сделать, добавив в команду параметр -u. Остальные два конфигурационных байта также соответствуют значениям, приведенным в файле Boards.txt. Если у кого-то возникнут сомнения по поводу соответствия дополнительного конфигурационного байта, то загляните в его описание выше - биты с 3 по 7 не используются и содержат \"1\", поэтому вместо 0x05 мы считываем значение 0xFD.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003EЗапись фьюзов Ардуино\u003C\/h2\u003E\u003Cdiv\u003EПолагаю, из приведенного выше описания фьюзов должно быть понятно, что при работе с ними нужно быть очень осторожным. В противном случае вы рискуете \"залочить\"\u0026nbsp; микроконтроллер, т.е. привести в такое состояние, когда его уже нельзя будет перепрограммировать (без дополнительного оборудования). Поэтому будьте внимательны, изменяя фьюзы микроконтроллера.\u003Cbr \/\u003E\u003Cbr \/\u003EДавайте в качестве примера попробуем запретить работу схемы BOD в Ардуино Уно. Обратившись к приведенному выше описанию конфигурационных байтов или к онлайн калькулятору\u0026nbsp;\u003Ca href=\"http:\/\/www.engbedded.com\/fusecalc\/\" target=\"_blank\"\u003EEngbedded Atmel AVR® Fuse Calculator\u003C\/a\u003E, мы видим, что за работу схемы BOD в ATmega328\/P отвечают фьюзы BODLEVEL и для ее запрета нужно записать в дополнительный конфигурационный байт\u0026nbsp;значение 0xFF. Это можно сделать следующей командой avrdude:\u003Cbr \/\u003E\u003Cbr \/\u003Eavrdude -c arduino -p m328p -P com26 -b 19200 -U efuse:w:0xFF:m\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/--F4KecNov9U\/W3laiYKYDoI\/AAAAAAAAAfQ\/ovoCIobw5owRKiI2rGwD9CeLayYeqFrQgCK4BGAYYCw\/s1600\/avrdude%2Bwrite%2Bfuses.png\" imageanchor=\"1\"\u003E\u003Cimg alt=\"avrdude запись фьюзов Ардуино\" border=\"0\" height=\"340\" src=\"https:\/\/1.bp.blogspot.com\/--F4KecNov9U\/W3laiYKYDoI\/AAAAAAAAAfQ\/ovoCIobw5owRKiI2rGwD9CeLayYeqFrQgCK4BGAYYCw\/s640\/avrdude%2Bwrite%2Bfuses.png\" title=\"\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003EИз скриншота видно, что avrdude сначала выполняет запись байта efuse, после чего производит контрольное считывание и сообщает об успешном выполнении операции.\u003Cbr \/\u003E\u003Cbr \/\u003EВ принципе нет\u0026nbsp;ничего сложного в работе с конфигурационными битами. Главное быть внимательным при их изменении, чтобы не залочить микроконтроллер.\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"https:\/\/tsibrov.blogspot.com\/feeds\/3658531361444533218\/comments\/default","title":"Комментарии к сообщению"},{"rel":"replies","type":"text/html","href":"https:\/\/tsibrov.blogspot.com\/2018\/08\/fuse-bits.html#comment-form","title":"Комментарии: 0"},{"rel":"edit","type":"application/atom+xml","href":"https:\/\/www.blogger.com\/feeds\/794788004739538112\/posts\/default\/3658531361444533218"},{"rel":"self","type":"application/atom+xml","href":"https:\/\/www.blogger.com\/feeds\/794788004739538112\/posts\/default\/3658531361444533218"},{"rel":"alternate","type":"text/html","href":"https:\/\/tsibrov.blogspot.com\/2018\/08\/fuse-bits.html","title":"Что такое Фьюзы. Чтение и запись фьюзов Ардуино"}],"author":[{"name":{"$t":"Владимир"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/07943437233560370294"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"16","height":"16","src":"https:\/\/img1.blogblog.com\/img\/b16-rounded.gif"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"https:\/\/1.bp.blogspot.com\/-ZDJ_hUDk10w\/W3EzbILZDOI\/AAAAAAAAAeU\/5U16wDMeiEYbcBYswC7oIgT2_MMDEs_VgCK4BGAYYCw\/s72-c\/Online%2Bfuse%2Bcalculator.png","height":"72","width":"72"},"thr$total":{"$t":"0"}}]}});